{"version":3,"sources":["wizmetria_web/processing/worker.cljs"],"mappings":"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","names":["wizmetria-web.processing.worker/worker-instance","cljs.core.atom","wizmetria-web.processing.worker/message-callbacks","wizmetria-web.processing.worker/batch-counter","wizmetria-web.processing.worker/get-worker","temp__5802__auto__","cljs.core/deref","worker","new-worker","js/Worker","cljs.core/reset!","event","data","batch-id","status","js/console.log","cljs.core/clj->js","temp__5804__auto__","callback","cljs.core.get","cljs.core._EQ_","js/console.error","G__13457","result","js/Object.keys","mirror","or__5002__auto__","G__13458","cljs.core.swap_BANG_","cljs.core/dissoc","error","re-frame.core/dispatch","wizmetria-web.processing.worker/terminate-worker","wizmetria-web.processing.worker/process-batch-in-worker","words","batch-type","cljs.core/inc","cljs.core/count","cljs.core/seq","cljs.core/vec","cljs.core.take","cljs.core.map","cljs.core/type","cljs.core/some","cljs.core/empty?","js/console.warn","cljs.core/assoc","cljs.core.into_array","re-frame.core/reg-fx","p__13462","map__13463","cljs.core/--destructure-map","on-complete","on-error","e13464","G__13466","G__13467","js/Error","err","G__13465","_","wizmetria-web.processing.worker/create-word-batches","batch-size","cljs.core.get_in","wizmetria-web.config/processing-config","total-count","batch-count","Math/ceil","batches","cljs.core.partition_all","wizmetria-web.processing.worker/process-words-in-batches","on-progress","map__13474","mirror-results","rotation-results","completed-batches","seq__13475","chunk__13476","count__13477","i__13478","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/first","cljs.core/next","batch","G__13529","G__13549","mirror-batch","rotation-batch","current","cljs.core.into","cljs.core.merge_with","cljs.core/into","progress-pct","G__13533","G__13550","sorted-mirror-results","p1__13472#","cljs.core.update_in","p__13534","vec__13535","cljs.core.nth","p__13555","vec__13556","k","v","cljs.core.sort_by","cljs.core.comp","cljs.core/-","sorted-rotation-results","p1__13473#","cljs.core.update","G__13544","G__13560"],"sourcesContent":["(ns wizmetria-web.processing.worker\r\n  (:require [re-frame.core :as rf]\r\n            [wizmetria-web.config :as config]))\r\n\r\n;; -- Worker Management --\r\n\r\n(def worker-instance (atom nil))\r\n(def message-callbacks (atom {}))\r\n(def batch-counter (atom 0))\r\n\r\n(defn get-worker\r\n  \"Get or create a web worker instance\"\r\n  []\r\n  (if-let [worker @worker-instance]\r\n    worker\r\n    (let [new-worker (js/Worker. \"js/symmetry-worker.js\")]\r\n      (reset! worker-instance new-worker)\r\n      \r\n      ;; Set up message handler\r\n      (set! (.-onmessage new-worker)\r\n            (fn [event]\r\n              (let [data (.-data event)\r\n                    batch-id (aget data \"batchId\")\r\n                    status (aget data \"status\")]\r\n                (js/console.log \"Worker message received:\" (clj->js data))\r\n                (when-let [callback (get @message-callbacks batch-id)]\r\n                  (if (= status \"error\")\r\n                    (do\r\n                      (js/console.error \"Worker error for batch\" batch-id \":\" (aget data \"error\"))\r\n                      (callback {:error (aget data \"error\")\r\n                                 :stack (aget data \"stack\")}))\r\n                    (let [result (aget data \"result\")]\r\n                      (js/console.log \"Worker success for batch\" batch-id)\r\n                      (if result\r\n                        (do\r\n                          (js/console.log \"Result structure:\" (js/Object.keys result))\r\n                          (when-let [mirror (aget result \"mirror\")]\r\n                            (js/console.log \"Mirror words:\" (.-length (aget mirror \"words\")))\r\n                            (js/console.log \"Mirror by-axis keys:\" (js/Object.keys (or (aget mirror \"by-axis\") (aget mirror \"byAxis\") {}))))\r\n                          \r\n                          (callback {:result (aget data \"result\")\r\n                                     :batch-type (aget data \"batchType\")}))\r\n                        (js/console.error \"Received null result from worker\"))))\r\n                  ;; Remove the callback after it's used\r\n                  (swap! message-callbacks dissoc batch-id)))))\r\n      \r\n      ;; Set up error handler\r\n      (set! (.-onerror new-worker)\r\n            (fn [error]\r\n              (js/console.error \"Worker error:\", error)\r\n              (rf/dispatch [:handle-processing-error \r\n                            {:error-message \"Web Worker error\"\r\n                             :details (.-message error)}])))\r\n      \r\n      new-worker)))\r\n\r\n(defn terminate-worker\r\n  \"Terminate the worker if it exists\"\r\n  []\r\n  (when-let [worker @worker-instance]\r\n    (.terminate worker)\r\n    (reset! worker-instance nil)\r\n    (reset! message-callbacks {})\r\n    (reset! batch-counter 0)))\r\n\r\n(defn process-batch-in-worker\r\n  \"Process a batch of words in the web worker\"\r\n  [words batch-type callback]\r\n  (let [worker (get-worker)\r\n        batch-id (swap! batch-counter inc)]\r\n    \r\n    (js/console.log \"Starting batch\" batch-id \"with\" (count words) \"words\")\r\n    \r\n    ;; Print sample words for debugging\r\n    (when (seq words)\r\n      (js/console.log \"Sample words in batch:\" (vec (take 5 words)))\r\n      (js/console.log \"Word types:\" (map type (take 5 words))))\r\n    \r\n    ;; Check if we have any empty words\r\n    (when (some empty? words)\r\n      (js/console.warn \"Empty words detected in batch\"))\r\n    \r\n    ;; Store callback for this batch\r\n    (swap! message-callbacks assoc batch-id callback)\r\n    \r\n    ;; Send the command to the worker\r\n    (.postMessage worker \r\n                  (clj->js {:command \"process\"\r\n                            :words (into-array words)\r\n                            :batchType batch-type\r\n                            :batchId batch-id}))))\r\n\r\n;; -- Re-frame Effects --\r\n\r\n(rf/reg-fx\r\n :worker-process-batch\r\n (fn [{:keys [words batch-type on-complete on-error]}]\r\n   (try\r\n     (process-batch-in-worker\r\n      words\r\n      batch-type\r\n      (fn [result]\r\n        (if (:error result)\r\n          (when on-error\r\n            (on-error {:error-message \"Error in worker processing\"\r\n                       :details (:error result)}))\r\n          (when on-complete\r\n            (on-complete (:result result))))))\r\n     (catch js/Error err\r\n       (js/console.error \"Error setting up worker batch:\", err)\r\n       (when on-error\r\n         (on-error {:error-message \"Failed to start worker processing\"\r\n                    :details (.-message err)}))))))\r\n\r\n(rf/reg-fx\r\n :worker-terminate\r\n (fn [_]\r\n   (terminate-worker)))\r\n\r\n;; -- Batched processing functions --\r\n\r\n(defn create-word-batches\r\n  \"Split words into multiple batches for parallel processing\"\r\n  [words]\r\n  (let [batch-size (get-in config/processing-config [:worker-batch-size] 5000)\r\n        total-count (count words)\r\n        batch-count (Math/ceil (/ total-count batch-size))\r\n        batches (partition-all batch-size words)]\r\n    {:batches (vec batches)\r\n     :batch-count batch-count\r\n     :total-words total-count}))\r\n\r\n(defn process-words-in-batches\r\n  \"Process word symmetry in batches using web workers\"\r\n  [words on-progress on-complete on-error]\r\n  (let [{:keys [batches batch-count]} (create-word-batches words)\r\n        mirror-results (atom {:words [] :by-axis {}})\r\n        rotation-results (atom {:words [] :sorted []})\r\n        completed-batches (atom 0)]\r\n    \r\n    (js/console.log \"Starting batch processing with\" batch-count \"batches\")\r\n    (js/console.log \"Sample words:\" (take 5 words))\r\n    \r\n    ;; Process each batch\r\n    (doseq [batch batches]\r\n      (process-batch-in-worker\r\n       batch\r\n       nil  ;; Calculate both mirror and rotation\r\n       (fn [result]\r\n         (if (:error result)\r\n           ;; Handle error\r\n           (do\r\n             (js/console.error \"Batch processing error:\" (clj->js (:error result)))\r\n             (when on-error\r\n               (on-error {:error-message \"Error processing word batch\"\r\n                          :details (:error result)})))\r\n           \r\n           ;; Process successful result\r\n           (do\r\n             ;; Update completed count\r\n             (swap! completed-batches inc)\r\n             (js/console.log \"Batch completed:\" @completed-batches \"/\" batch-count)\r\n             \r\n             ;; Update results\r\n             (let [mirror-batch (get-in result [:result :mirror])\r\n                   rotation-batch (get-in result [:result :rotation])]\r\n               \r\n               (js/console.log \"Mirror batch result:\" (clj->js mirror-batch))\r\n               (js/console.log \"Rotation batch result:\" (clj->js rotation-batch))\r\n               \r\n               ;; Update mirror words\r\n               (swap! mirror-results\r\n                      (fn [current]\r\n                        {:words (into (:words current) (:words mirror-batch))\r\n                         :by-axis (merge-with into \r\n                                              (:by-axis current) \r\n                                              (or (:by-axis mirror-batch) \r\n                                                  (:byAxis mirror-batch) \r\n                                                  {}))}))\r\n               \r\n               ;; Update rotation words\r\n               (swap! rotation-results\r\n                      (fn [current]\r\n                        {:words (into (:words current) (:words rotation-batch))\r\n                         :sorted (into (:sorted current) \r\n                                       (or (:sorted rotation-batch) []))})))\r\n             \r\n             ;; Update progress\r\n             (when on-progress\r\n               (let [progress-pct (* (/ @completed-batches batch-count) 100)]\r\n                 (on-progress {:progress progress-pct\r\n                               :completed-batches @completed-batches\r\n                               :total-batches batch-count})))\r\n             \r\n             ;; Check if all batches are done\r\n             (when (= @completed-batches batch-count)\r\n               ;; Sort the combined results\r\n               (let [sorted-mirror-results\r\n                     (update-in @mirror-results [:by-axis] \r\n                                #(into {} (map (fn [[k v]] \r\n                                                 [k (sort-by (comp - count) v)]) \r\n                                               %)))\r\n                     sorted-rotation-results\r\n                     (update @rotation-results :sorted #(sort-by (comp - count) %))]\r\n                 \r\n                 (js/console.log \"All batches completed. Final results:\")\r\n                 (js/console.log \"Mirror words:\" (count (:words @mirror-results)))\r\n                 (js/console.log \"Rotation words:\" (count (:words @rotation-results)))\r\n                 \r\n                 ;; Call the completion callback\r\n                 (when on-complete\r\n                   (on-complete {:mirror sorted-mirror-results\r\n                                 :rotation sorted-rotation-results}))))))))))) "]}