{"version":3,"sources":["wizmetria_web/processing/pipeline.cljs"],"mappings":"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","names":["wizmetria-web.processing.pipeline/processing-states","wizmetria-web.processing.pipeline/next-state","current-state","cljs.core.get_in","p__13618","map__13619","cljs.core/--destructure-map","cljs.core.get","wizmetria-web.processing.pipeline/process-text-pipeline-fx","text","on-state-change","on-complete","on-error","e13620","js/console.log","cljs.core/count","G__13622","text-result","wizmetria-web.processing.text/process-text","unique-words","word-count","G__13627","js/setTimeout","G__13628","wizmetria-web.processing.symmetry/process-symmetry-with-worker","progress-info","cljs.core/clj->js","G__13629","cljs.core.merge","stats","and__5000__auto__","cljs.core/map?","G__13631","G__13633","js/console.error","G__13634","error-info","js/Error","err","G__13621","re-frame.core/reg-fx","p__13643","map__13644","wizmetria-web.processing.pipeline/process-text-chunks-fx","on-progress","chunk-info","wizmetria-web.processing.text/create-chunks","processing-delay","wizmetria-web.config/processing-config","processed-text","cljs.core.atom","processed-chunks","G__13645","cljs.core/deref","current-chunk","chunks","total-chunks","final-text","G__13663","G__13664","wizmetria-web.processing.symmetry/process-symmetry","G__13665","G__13666","e13673","chunk","cljs.core.nth","chunk-text","cljs.core.apply","cljs.core/str","cljs.core.swap_BANG_","cljs.core/inc","next-chunk","progress-pct","G__13675","process-next-chunk","G__13674","cljs.core/empty?","G__13676"],"sourcesContent":["(ns wizmetria-web.processing.pipeline\r\n  (:require [re-frame.core :as rf]\r\n            [wizmetria-web.config :as config]\r\n            [wizmetria-web.processing.text :as text-proc]\r\n            [wizmetria-web.processing.symmetry :as sym-proc]))\r\n\r\n;; -- Processing state machine --\r\n\r\n(def processing-states\r\n  {:idle {:next :reading}\r\n   :reading {:next :processing-text}\r\n   :processing-text {:next :extracting-words}\r\n   :extracting-words {:next :finding-symmetry}\r\n   :finding-symmetry {:next :mirror-symmetry}\r\n   :mirror-symmetry {:next :rotational-symmetry}\r\n   :rotational-symmetry {:next :calculating-stats}\r\n   :calculating-stats {:next :done}\r\n   :done {:next nil}\r\n   :error {:next nil}})\r\n\r\n(defn next-state \r\n  \"Get the next state in the pipeline\"\r\n  [current-state]\r\n  (get-in processing-states [current-state :next]))\r\n\r\n;; -- Event effects for processing pipeline --\r\n\r\n;; Define the function for explicit export\r\n(defn process-text-pipeline-fx\r\n  \"Process text and find symmetric words using workers when available\"\r\n  [{:keys [text on-state-change on-complete on-error]}]\r\n  (try\r\n    (js/console.log \"Starting text processing pipeline with text length:\" (count text))\r\n    \r\n    ;; Process text first\r\n    (on-state-change {:state :processing-text\r\n                      :progress 0})\r\n    \r\n    (let [text-result (text-proc/process-text text)\r\n          unique-words (:unique-words text-result)\r\n          word-count (:word-count text-result)]\r\n      \r\n      (js/console.log \"Text processed, found\" word-count \"unique words\")\r\n      (on-state-change {:state :extracting-words\r\n                        :progress 75\r\n                        :word-count word-count})\r\n      \r\n      ;; Process symmetry with or without workers\r\n      (js/setTimeout\r\n       (fn []\r\n         (on-state-change {:state :finding-symmetry\r\n                           :progress 80})\r\n         \r\n         ;; Use worker-based processing for symmetry\r\n         (sym-proc/process-symmetry-with-worker \r\n          unique-words\r\n          \r\n          ;; Progress callback\r\n          (fn [progress-info]\r\n            (js/console.log \"Symmetry progress:\" (clj->js progress-info))\r\n            (on-state-change (merge progress-info\r\n                                    {:state :finding-symmetry})))\r\n          \r\n          ;; Completion callback  \r\n          (fn [stats]\r\n            (js/console.log \"Symmetry processing complete, stats:\" (clj->js stats))\r\n            \r\n            ;; Verify stats structure\r\n            (if (and stats \r\n                     (map? stats)\r\n                     (:mirror stats)\r\n                     (:rotation stats))\r\n              (do\r\n                (js/console.log \"Stats structure looks valid:\")\r\n                (js/console.log \"- Mirror count:\" (get-in stats [:mirror :count]))\r\n                (js/console.log \"- Rotation count:\" (get-in stats [:rotation :count]))\r\n                \r\n                ;; Report completion  \r\n                (on-state-change {:state :done\r\n                                  :progress 100})\r\n                \r\n                ;; Complete with full results\r\n                (on-complete (merge text-result {:stats stats})))\r\n              \r\n              ;; Handle invalid stats structure\r\n              (do\r\n                (js/console.error \"Invalid stats structure returned:\" (clj->js stats))\r\n                (on-error {:error-message \"Invalid symmetry results\"\r\n                           :details \"The worker returned an incomplete or invalid result structure\"}))))\r\n          \r\n          ;; Error callback\r\n          (fn [error-info]\r\n            (js/console.error \"Symmetry processing error:\" (clj->js error-info))\r\n            (on-error error-info))))\r\n       500))\r\n    (catch js/Error err\r\n      (js/console.error \"Error in text processing:\" err)\r\n      (when on-error\r\n        (on-error {:error err\r\n                   :error-message \"Error processing text\"\r\n                   :details (.-message err)})))))\r\n\r\n;; Register the effect for use in the current namespace\r\n(rf/reg-fx\r\n :process-text-pipeline\r\n process-text-pipeline-fx)\r\n\r\n;; -- Chunk-based processing alternative --\r\n\r\n;; Define the effect handler function for explicit export\r\n(defn process-text-chunks-fx\r\n  [{:keys [text on-progress on-complete]}]\r\n  ;; Extract chunking information\r\n  (let [chunk-info (text-proc/create-chunks text)\r\n        processing-delay (get-in config/processing-config [:processing-delay-ms])\r\n        processed-text (atom \"\")\r\n        processed-chunks (atom 0)]\r\n    \r\n    ;; Early progress report\r\n    (when on-progress\r\n      (on-progress {:state :processing-text\r\n                    :progress 0\r\n                    :total-chunks (:total-chunks chunk-info)\r\n                    :processed-chunks 0}))\r\n    \r\n    ;; Define the processing function\r\n    (letfn [(process-next-chunk []\r\n              (let [current-chunk @processed-chunks\r\n                    chunks (:chunks chunk-info)\r\n                    total-chunks (:total-chunks chunk-info)]\r\n                \r\n                (if (>= current-chunk total-chunks)\r\n                  ;; All chunks processed - complete the pipeline\r\n                  (let [final-text @processed-text\r\n                        text-result (text-proc/process-text final-text)]\r\n                    \r\n                    ;; Report extracting words\r\n                    (when on-progress\r\n                      (on-progress {:state :extracting-words\r\n                                    :progress 80\r\n                                    :word-count (:word-count text-result)}))\r\n                    \r\n                    ;; Process symmetry after a delay\r\n                    (js/setTimeout\r\n                     (fn []\r\n                       (when on-progress\r\n                         (on-progress {:state :finding-symmetry\r\n                                       :progress 90}))\r\n                       \r\n                       ;; Calculate symmetry\r\n                       (let [stats (sym-proc/process-symmetry (:unique-words text-result))]\r\n                         \r\n                         ;; Mark as done\r\n                         (when on-progress\r\n                           (on-progress {:state :done\r\n                                         :progress 100}))\r\n                         \r\n                         ;; Complete with results\r\n                         (when on-complete\r\n                           (on-complete (merge text-result {:stats stats})))))\r\n                     processing-delay))\r\n                  \r\n                  ;; Process this chunk\r\n                  (try\r\n                    (let [chunk (nth chunks current-chunk)\r\n                          chunk-text (apply str chunk)]\r\n                      \r\n                      ;; Add to processed text\r\n                      (swap! processed-text str chunk-text)\r\n                      (swap! processed-chunks inc)\r\n                      \r\n                      ;; Calculate progress\r\n                      (let [next-chunk (inc current-chunk)\r\n                            progress-pct (* (/ next-chunk total-chunks) 70)]\r\n                        \r\n                        ;; Report progress\r\n                        (when on-progress\r\n                          (on-progress {:state :processing-text\r\n                                        :progress progress-pct\r\n                                        :processed-chunks next-chunk\r\n                                        :total-chunks total-chunks}))\r\n                        \r\n                        ;; Schedule next chunk\r\n                        (js/setTimeout process-next-chunk processing-delay)))\r\n                    (catch js/Error err\r\n                      (js/console.error \"Error processing chunk:\" err)\r\n                      (when on-progress\r\n                        (on-progress {:state :error\r\n                                      :error-message \"Error processing text chunk\"\r\n                                      :details (.-message err)})))))))]\r\n      \r\n      ;; Start processing\r\n      (if (empty? text)\r\n        ;; Handle empty text\r\n        (when on-complete\r\n          (on-complete (text-proc/process-text \"\")))\r\n        \r\n        ;; Start processing for normal text\r\n        (js/setTimeout process-next-chunk 10)))))\r\n\r\n;; Register the effect for use in the current namespace\r\n(rf/reg-fx\r\n :process-text-chunks\r\n process-text-chunks-fx) "]}