{"version":3,"sources":["wizmetria_web/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_fx","p__12841","p__12842","map__12843","cljs.core/--destructure-map","cljs.core.get","vec__12844","cljs.core.nth","db","_","file","e12847","cljs.core.assoc","js/Error","e","re-frame.core/reg-fx","reader","js/FileReader","file-size","start-time","js/Date.now","simulate-progress?","progress-interval","js/setInterval","elapsed","artificial-progress","x__5090__auto__","y__5091__auto__","re-frame.core/dispatch","js/clearInterval","js/console.error","content","cljs.core/empty?","js/setTimeout","and__5000__auto__","progress","e12850","err","error","js/console","re_frame.core.reg_event_db","p__12851","vec__12852","state","cljs.core.update","cljs.core/merge","p__12855","p__12856","map__12857","vec__12858","text","js/console.log","cljs.core/count","state-data","cljs.core/clj->js","result","error-info","p__12867","p__12868","map__12869","vec__12870","progress-data","p__12873","p__12874","map__12876","vec__12878","stats","cljs.core.get_in","updated-db","re-frame.core/dispatch-sync","p__12886","vec__12887","word","results","cljs.core/not-empty","wizmetria-web.sym/evaluate","wizmetria-web.sym/clean","cljs.core/not","cljs.core/dissoc","p__12891","vec__12892","context","p__12897","p__12898","map__12902","vec__12903","current-state","merged-state","cljs.core.merge","or__5002__auto__","temp__5804__auto__","p__12907","map__12908","_db"],"sourcesContent":["(ns wizmetria-web.events\r\n  (:require [re-frame.core :as rf]\r\n            [wizmetria-web.sym :as sym]))\r\n\r\n;; -- Events for file processing --\r\n\r\n(rf/reg-event-fx\r\n :process-file\r\n (fn [{:keys [db]} [_ file]]\r\n   (try\r\n     {:db (assoc db :processing-state {:status :reading \r\n                                       :file-name (.-name file)\r\n                                       :file-obj file  ;; Store file object for possible retry\r\n                                       :progress 0})\r\n      :fx [[:read-file-async file]]}\r\n     (catch js/Error e\r\n       {:db (assoc db :processing-state {:status :error \r\n                                         :error-message \"Could not process file\"\r\n                                         :details (.-message e)\r\n                                         :file-obj file}) ;; Store file even on error\r\n        :fx [[:log-error e]]}))))\r\n\r\n(rf/reg-fx\r\n :read-file-async\r\n (fn [file]\r\n   (let [reader (js/FileReader.)\r\n         file-size (.-size file)\r\n         start-time (js/Date.now())\r\n         ;; For small files, we'll simulate progress\r\n         simulate-progress? (< file-size (* 1024 1024))\r\n         progress-interval (when simulate-progress?\r\n                             (js/setInterval\r\n                              (fn []\r\n                                ;; Calculate artificial progress based on elapsed time\r\n                                ;; Assuming small files take about 2 seconds max\r\n                                (let [elapsed (- (js/Date.now) start-time)\r\n                                      artificial-progress (min 90 (/ (* elapsed 100) 2000))]\r\n                                  (rf/dispatch [:update-processing-progress\r\n                                               {:status :reading\r\n                                                :progress artificial-progress}])))\r\n                              100))]\r\n     \r\n     ;; Error handling for file reading\r\n     (set! (.-onerror reader)\r\n           (fn [e]\r\n             (when simulate-progress?\r\n               (js/clearInterval progress-interval))\r\n             (js/console.error \"Error reading file:\", e)\r\n             (rf/dispatch [:update-processing-progress\r\n                          {:status :error\r\n                           :error-message \"Could not read file\"\r\n                           :details (str \"Error: \" (.-message e))}])))\r\n     \r\n     (set! (.-onload reader)\r\n           (fn [e]\r\n             ;; Clear the interval when the file is fully loaded\r\n             (when simulate-progress?\r\n               (js/clearInterval progress-interval))\r\n             \r\n             ;; Defensive check for null content\r\n             (let [content (.. e -target -result)]\r\n               (if (or (nil? content) (empty? content))\r\n                 ;; Handle empty file\r\n                 (rf/dispatch [:update-processing-progress\r\n                              {:status :error\r\n                               :error-message \"Empty file\"\r\n                               :details \"The file appears to be empty\"}])\r\n                 \r\n                 (do\r\n                   ;; Set progress to 100% explicitly\r\n                   (rf/dispatch [:update-processing-progress\r\n                                {:status :reading\r\n                                 :progress 100}])\r\n                   \r\n                   ;; Small delay to show 100% before switching to processing\r\n                   (js/setTimeout\r\n                    (fn []\r\n                      (rf/dispatch [:prepare-text-processing content]))\r\n                    200))))))\r\n     \r\n     (set! (.-onprogress reader)\r\n           (fn [e]\r\n             ;; For larger files, we still use the real progress\r\n             (when (and (.-lengthComputable e) (not simulate-progress?))\r\n               (let [progress (/ (.-loaded e) (.-total e))]\r\n                 (rf/dispatch [:update-processing-progress\r\n                              {:status :reading\r\n                               :progress (* 100 progress)}])))))\r\n     \r\n     ;; Start reading the file\r\n     (try\r\n       (.readAsText reader file)\r\n       (catch js/Error err\r\n         (js/console.error \"Exception reading file:\", err)\r\n         (rf/dispatch [:update-processing-progress\r\n                      {:status :error\r\n                       :error-message \"File reading failed\"\r\n                       :details (.-message err)}]))))))\r\n\r\n(rf/reg-fx\r\n :log-error\r\n (fn [error]\r\n   (.error js/console \"Error in file processing:\" error)))\r\n\r\n(rf/reg-event-db\r\n :update-processing-progress\r\n (fn [db [_ state]]\r\n   (update db :processing-state merge state)))\r\n\r\n(rf/reg-event-fx\r\n :prepare-text-processing\r\n (fn [{:keys [db]} [_ text]]\r\n   (js/console.log \"Starting text processing with text length:\" (count text))\r\n   {:db (assoc db :processing-state {:status :processing\r\n                                    :file-obj (:file-obj db)})\r\n    :process-text-pipeline\r\n    {:text text\r\n     :on-state-change\r\n     (fn [state-data]\r\n       (js/console.log \"Processing state change:\", (clj->js state-data))\r\n       (rf/dispatch [:update-processing-progress\r\n                    (assoc state-data :status (:state state-data))]))\r\n     :on-complete\r\n     (fn [result]\r\n       (js/console.log \"Processing complete, result:\", (clj->js result))\r\n       (rf/dispatch [:set-wordlist-stats (:stats result)]))\r\n     :on-error\r\n     (fn [error-info]\r\n       (js/console.error \"Processing error:\", (clj->js error-info))\r\n       (rf/dispatch [:handle-processing-error error-info]))}}))\r\n\r\n(rf/reg-event-fx\r\n :execute-text-processing\r\n (fn [{:keys [db]} [_ text]]\r\n   (js/console.log \"Starting chunked text processing with text length:\" (count text))\r\n   {:db (assoc db :processing-state {:status :processing\r\n                                    :file-obj (:file-obj db)})\r\n    :process-text-chunks\r\n    {:text text\r\n     :on-progress\r\n     (fn [progress-data]\r\n       (js/console.log \"Chunk processing progress:\", (clj->js progress-data))\r\n       (rf/dispatch [:update-processing-progress\r\n                    (assoc progress-data :status (:state progress-data))]))\r\n     :on-complete\r\n     (fn [result]\r\n       (js/console.log \"Chunked processing complete, result:\", (clj->js result))\r\n       (rf/dispatch [:set-wordlist-stats (:stats result)]))}}))\r\n\r\n(rf/reg-event-fx\r\n :set-wordlist-stats\r\n (fn [{:keys [db]} [_ stats]]\r\n   (js/console.log \"Setting wordlist stats:\" (clj->js stats))\r\n   (js/console.log \"Mirror stats:\" (clj->js (:mirror stats)))\r\n   (js/console.log \"Rotation stats:\" (clj->js (:rotation stats)))\r\n   \r\n   ;; Debug total counts\r\n   (when stats\r\n     (js/console.log \"Total words:\" (get stats :total-words 0))\r\n     (js/console.log \"Mirror count:\" (get-in stats [:mirror :count] 0))\r\n     (js/console.log \"Rotation count:\" (get-in stats [:rotation :count] 0))\r\n     \r\n     ;; Check if we have any words in the top-n lists\r\n     (js/console.log \"Mirror top-n count:\" (count (get-in stats [:mirror :top-n] [])))\r\n     (js/console.log \"Rotation top-n count:\" (count (get-in stats [:rotation :top-n] []))))\r\n   \r\n   ;; First update the UI with the stats\r\n   (let [updated-db (assoc db \r\n                           :wordlist-stats stats\r\n                           :processing-state {:status :complete})]\r\n     \r\n     ;; Then terminate the worker after a delay\r\n     (js/setTimeout \r\n      (fn [] \r\n        (js/console.log \"Terminating worker after displaying results\")\r\n        (rf/dispatch-sync [:terminate-worker]))\r\n      5000)  ;; 5-second delay\r\n     \r\n     ;; Return updated db\r\n     {:db updated-db})))\r\n\r\n;; -- Events for word symmetry --\r\n\r\n(rf/reg-event-db\r\n :update-word\r\n (fn [db [_ word]]\r\n   (assoc db :word word)))\r\n\r\n(rf/reg-event-db\r\n :check-symmetry\r\n (fn [db _]\r\n   (let [word (:word db)\r\n         results (when (not-empty word)\r\n                   (sym/evaluate [(sym/clean word)]))]\r\n     (assoc db :symmetry-results results))))\r\n\r\n;; -- UI-related events --\r\n\r\n(rf/reg-event-db\r\n :toggle-shiny-effects\r\n (fn [db _]\r\n   (update db :shiny-effects-enabled not)))\r\n\r\n;; -- Error handling events --\r\n\r\n(rf/reg-event-db\r\n :clear-processing-error\r\n (fn [db _]\r\n   (update db :processing-state dissoc :error-message :details :status)))\r\n\r\n(rf/reg-event-fx\r\n :log-error\r\n (fn [_ [_ error context]]\r\n   (js/console.error \"Application error:\", error, \"Context:\", (clj->js context))\r\n   nil))\r\n\r\n(rf/reg-event-fx\r\n :handle-processing-error\r\n (fn [{:keys [db]} [_ error-info]]\r\n   (let [current-state (get db :processing-state {})\r\n         merged-state (merge\r\n                       current-state\r\n                       {:status :error\r\n                        :error-message (or (:error-message error-info) \r\n                                          \"An error occurred during processing\")\r\n                        :details (or (:details error-info) \r\n                                    (when-let [err (:error error-info)]\r\n                                      (.-message err)))})]\r\n     {:db (assoc db :processing-state merged-state)\r\n      :fx [[:log-error [(:error error-info) merged-state]]]})))\r\n\r\n;; -- Worker cleanup events --\r\n\r\n(rf/reg-event-fx\r\n :terminate-worker\r\n (fn [_ _]\r\n   {:worker-terminate nil}))\r\n\r\n;; Handle application shutdown\r\n(rf/reg-event-fx\r\n :shutdown\r\n (fn [{:keys [_db]} _]\r\n   {:worker-terminate nil})) "]}