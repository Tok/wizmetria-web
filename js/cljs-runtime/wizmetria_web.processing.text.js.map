{"version":3,"sources":["wizmetria_web/processing/text.cljs"],"mappings":";AAMA;;;8CAAA,9CAAMA,oGAEHC,KAAKC;AAFR,AAGE,YAAA,ZAACC,oDAAuD,AAACC,gBAAMH;;AAC/D,YAAA,ZAACE,+BAAkCD;;AACnC,YAAA,ZAACC,2BAA8B,EAAI,yBAAA,xBAAG,AAACC,gBAAMH,gBAAW,eAAA,IAAA,nBAAYA,0BAAYA;;AAEhF,IAAMI,sGAAYJ,vBACD,4BAAA,cAAA,1CAACK,vBACD,sEAAA,MAAA,5EAACA,pBACD,AAACC,1BACD,AAACC;IACZC,QAAM,2DAAA,3DAACC,mDAAUL;IACjBM,iBAAe,+CAAA,WAAAC,1DAACC;AAAD,AAAS,QAAI,gBAAAD,hBAACR,qCAASF;GAAYO;IAClDK,eAAa,6CAAA,7CAACC,+EAASJ;AAP7B,AASE,YAAA,ZAACR,iCAAoC,AAACC,gBAAMK;;AAC5C,YAAA,2CAAA,vDAACN,4CAA0CD,gBAAgB,AAACE,gBAAMO;;AAClE,YAAA,ZAACR,4BAA+B,AAACC,gBAAMU;;AACvC,GAAM,AAACE,cAAIF;AAAX,AACE,YAAA,ZAACX,mCAAsC,6CAAA,7CAACc,kDAAQH;;AADlD;;AAGAA;;AAEJ;;;6CAAA,7CAAMI,kGAEHjB;AAFH,AAGE,IAAMkB,kBAAgB,sFAAA,mFAAA,zKAACC,+CAAOC;IACxBP,eAAa,AAACd,4CAAcC,KAAKkB;AADvC,AAAA,kDAAA,kFAAA,bAEiBL,8EACF,AAACV,gBAAMU;;AAIxB;;;8CAAA,9CAAMQ,oGAEHrB;AAFH,AAGE,IAAMsB,aAAW,sFAAA,mFAAA,zKAACH,+CAAOC;IACnBG,eAAa,AAACpB,gBAAMH;IAEpBwB,sBAAoB,iBAAAC,kBAAA;IAAAC,kBAAS,iBAAAC,kBAAKL;IAALM,kBAAgB,AAACC,UAAU,gBAAA,fAAGN;AAA9B,AAAA,SAAAI,kBAAAC,mBAAAD,kBAAAC;;AAAT,AAAA,SAAAH,kBAAAC,mBAAAD,kBAAAC;;IAEpBI,SAAO,AAACC,cAAI,AAACC,sDAAcR,oBAAoBxB;AALrD,AAAA,kDAAA,8DAAA,6FAAA,qFAAA,zLAMW8B,4EACM,AAAC3B,gBAAM2B,yEACTN,yFACED","names":["wizmetria-web.processing.text/extract-words","text","min-length","js/console.log","cljs.core/count","cleaned","clojure.string/replace","clojure.string/trim","clojure.string/upper-case","words","clojure.string.split","filtered-words","p1__13456#","cljs.core.filter","unique-words","cljs.core.into","cljs.core/seq","cljs.core.take","wizmetria-web.processing.text/process-text","min-word-length","cljs.core.get_in","wizmetria-web.config/processing-config","wizmetria-web.processing.text/create-chunks","chunk-size","total-length","adjusted-chunk-size","x__5087__auto__","y__5088__auto__","x__5090__auto__","y__5091__auto__","Math/ceil","chunks","cljs.core/vec","cljs.core.partition_all"],"sourcesContent":["(ns wizmetria-web.processing.text\r\n  (:require [clojure.string :as str]\r\n            [wizmetria-web.config :as config]))\r\n\r\n;; -- Pure text processing functions --\r\n\r\n(defn extract-words \r\n  \"Extract words from text, filtering by minimum length\"\r\n  [text min-length]\r\n  (js/console.log \"Extracting words from text of length:\" (count text))\r\n  (js/console.log \"Min word length:\" min-length)\r\n  (js/console.log \"Sample text:\" (if (> (count text) 100) (.substring text 0 100) text))\r\n  \r\n  (let [cleaned (-> text\r\n                   (str/replace #\"[^a-zA-Z\\s]\" \" \")\r\n                   (str/replace #\"\\s+\" \" \")\r\n                   (str/trim)\r\n                   (str/upper-case))\r\n        words (str/split cleaned #\"\\s+\")\r\n        filtered-words (filter #(>= (count %) min-length) words)\r\n        unique-words (into #{} filtered-words)]\r\n    \r\n    (js/console.log \"Total words found:\" (count words))\r\n    (js/console.log \"Filtered words (length \u2265\" min-length \"):\" (count filtered-words))\r\n    (js/console.log \"Unique words:\" (count unique-words))\r\n    (when (seq unique-words)\r\n      (js/console.log \"Sample unique words:\" (take 10 unique-words)))\r\n    \r\n    unique-words))\r\n\r\n(defn process-text\r\n  \"Process the full text and extract unique words\"\r\n  [text]\r\n  (let [min-word-length (get-in config/processing-config [:min-word-length])\r\n        unique-words (extract-words text min-word-length)]\r\n    {:unique-words unique-words\r\n     :word-count (count unique-words)}))\r\n\r\n;; -- Chunked processing functions --\r\n\r\n(defn create-chunks\r\n  \"Divide text into chunks of specified size for progressive processing\"\r\n  [text]\r\n  (let [chunk-size (get-in config/processing-config [:chunk-size])\r\n        total-length (count text)\r\n        ;; Use smaller chunks for more frequent progress updates\r\n        adjusted-chunk-size (max 250 (min chunk-size (Math/ceil (/ total-length 50))))\r\n        ;; Create vector of chunks for direct indexing access\r\n        chunks (vec (partition-all adjusted-chunk-size text))]\r\n    {:chunks chunks\r\n     :total-chunks (count chunks)\r\n     :chunk-size adjusted-chunk-size\r\n     :total-length total-length})) "]}