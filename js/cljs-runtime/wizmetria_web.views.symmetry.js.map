{"version":3,"sources":["wizmetria_web/views/symmetry.cljs"],"mappings":"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","names":["wizmetria-web.views.symmetry/input-field","cljs.core/deref","p1__12399#","word","re_frame.core.subscribe","wizmetria-web.i18n/t","re-frame.core/dispatch","wizmetria-web.views.symmetry/check-word","cleaned-word","wizmetria-web.util/clean","axis-id","cljs.core/seq","wizmetria-web.sym/axis-id-for-word","rotation-axis-id","wizmetria-web.sym/rotation-symmetry-axis-id-for-word","has-mirror-symmetry","and__5000__auto__","wizmetria-web.sym/symmetric-word?","has-rotation-symmetry","cljs.core/not","wizmetria-web.sym/rotation-symmetric-word?","cljs.core/empty?","wizmetria-web.sym/id->axis-name","wizmetria-web.views.symmetry/symmetry-display","results","word-axis-id","cljs.core/not-empty","wizmetria-web.grid/symmetry-view","or__5002__auto__"],"sourcesContent":["(ns wizmetria-web.views.symmetry\r\n  (:require [re-frame.core :as rf]\r\n            [wizmetria-web.grid :as grid]\r\n            [wizmetria-web.util :as util]\r\n            [wizmetria-web.sym :as sym]\r\n            [wizmetria-web.i18n :refer [t]]))\r\n\r\n;; -- Input field component --\r\n(defn input-field []\r\n  (let [word @(rf/subscribe [:word])]\r\n    [:div.flex.flex-col.items-center.mb-4\r\n     [:label.text-lg.mb-1.text-purple-200 (t :input-label)]\r\n     [:div.flex.w-full.max-w-md.shadow-lg\r\n      [:input.w-full.px-4.py-2.bg-gray-800.border-2.border-purple-700.rounded-l-lg.focus:outline-none.focus:ring-2.focus:ring-indigo-500.text-gray-100.placeholder-gray-500\r\n       {:type \"text\"\r\n        :value word\r\n        :placeholder \"e.g. WIZARD\"\r\n        :on-change #(rf/dispatch [:update-word (-> % .-target .-value)])}]\r\n      [:button.bg-purple-700.text-white.px-5.py-2.rounded-r-lg.hover:bg-purple-600.focus:outline-none.focus:ring-2.focus:ring-purple-500.transition-colors.duration-200.font-medium\r\n       {:on-click #(rf/dispatch [:check-symmetry])}\r\n       (t :analyze-button)]]]))\r\n\r\n;; -- Symmetry result display component --\r\n(defn check-word []\r\n  (let [word @(rf/subscribe [:word])\r\n        cleaned-word (util/clean word)\r\n        axis-id (when (seq cleaned-word) (sym/axis-id-for-word cleaned-word))\r\n        rotation-axis-id (when (seq cleaned-word) (sym/rotation-symmetry-axis-id-for-word cleaned-word))\r\n        has-mirror-symmetry (and (seq cleaned-word) (sym/symmetric-word? cleaned-word))\r\n        has-rotation-symmetry (and (seq cleaned-word)\r\n                                  (not has-mirror-symmetry)\r\n                                  (sym/rotation-symmetric-word? cleaned-word))]\r\n    [:div.mt-4.text-center\r\n     (if (empty? cleaned-word)\r\n       [:p.text-gray-400 (str (t :input-label) \" \" (t :for) \" \" (t :symmetry-axis))]\r\n       (cond\r\n         has-mirror-symmetry\r\n         [:p.text-green-400 \r\n          (str \"\\\"\" cleaned-word \"\\\" \" (t :with) \" \" (t :mirror-symmetry) \" \" (t :around-axis) \" \" \r\n               (when axis-id (sym/id->axis-name axis-id)))]\r\n         \r\n         has-rotation-symmetry\r\n         [:p.text-green-400 \r\n          (str \"\\\"\" cleaned-word \"\\\" \" (t :with) \" \" (t :rotation-symmetry) \" \" (t :around-axis) \" \" \r\n               (when rotation-axis-id (sym/id->axis-name rotation-axis-id)))]\r\n         \r\n         :else\r\n         [:p.text-red-400 \r\n          (str \"\\\"\" cleaned-word \"\\\" \" (t :no-symmetry))]))]))\r\n\r\n;; -- Symmetry visualization component --\r\n(defn symmetry-display []\r\n  (let [results @(rf/subscribe [:symmetry-results])\r\n        word @(rf/subscribe [:word])\r\n        cleaned-word (util/clean word)\r\n        word-axis-id (when (not-empty cleaned-word) (sym/axis-id-for-word cleaned-word))\r\n        rotation-axis-id (when (not-empty cleaned-word) (sym/rotation-symmetry-axis-id-for-word cleaned-word))\r\n        has-mirror-symmetry (and (some? word-axis-id) (sym/symmetric-word? cleaned-word))\r\n        has-rotation-symmetry (and (not has-mirror-symmetry)\r\n                                 (seq cleaned-word)\r\n                                 (sym/rotation-symmetric-word? cleaned-word))]\r\n    [:div\r\n     (when (and results (seq results))\r\n       [:div.mt-4.w-full.flex.flex-col.items-center\r\n        [:h2.text-xl.mb-3.text-center.text-purple-300.font-semibold (t :symmetry-results)]\r\n        [check-word]\r\n        [:div.flex.flex-wrap.justify-center.gap-6.w-full.mt-4\r\n         ;; Show a single visualization with correct symmetry information\r\n         [:div.bg-gray-800.p-4.rounded-lg.shadow-lg.flex.flex-col.items-center.w-80.border.border-indigo-700.transform.transition-all.duration-300.hover:scale-105\r\n          {:class (when (and (not has-mirror-symmetry) (not has-rotation-symmetry)) \"no-symmetry-container\")}\r\n          [:h3.text-lg.mb-2.text-center.text-indigo-300.font-medium \r\n           (cond\r\n             has-mirror-symmetry (t :mirror-symmetry)\r\n             has-rotation-symmetry (t :rotation-symmetry)\r\n             :else (t :no-symmetry))]\r\n          [:div.alphabet-circle.flex.items-center.justify-center.bg-gray-900.rounded-full.p-1\r\n           [grid/symmetry-view word\r\n            (cond \r\n              has-mirror-symmetry word-axis-id\r\n              has-rotation-symmetry rotation-axis-id\r\n              :else nil)\r\n            (or has-mirror-symmetry has-rotation-symmetry)]]]]])])) "]}