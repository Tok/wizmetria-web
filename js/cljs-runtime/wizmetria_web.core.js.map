{"version":3,"sources":["wizmetria_web/core.cljs"],"mappings":";AAUA,2DAAA,3DAACA,kKAEA,WAAKC;AAAL,AACE,OAAA,mFAAOA;;AAEV,2DAAA,3DAACD,0LAEA,WAAKC;AAAL,AACE,OAAA,2GAAmBA;;AAEtB,2DAAA,3DAACD,uLAEA,WAAKC;AAAL,AACE,OAAA,wGAAiBA;;AAEpB,2DAAA,3DAACD,0LAEA,WAAKC;AAAL,AACE,OAAA,2GAAmBA;;AAEtB,2DAAA,3DAACD,oMAEA,WAAKC;AAAL,AACE,sDAAA,uFAAA,tIAACC,4CAAID;;AAGR,yDAAA,zDAACE,yHAEA,WAAKC,EAAEA;AAAP,AAEE,iBAAA,2CAAA,qDAAA,SAAA,sOAAA,0EAAA,KAAA,6EAAA,KAAA,uFAAA,plBAAMC,mMAC8B,2BAAA,3BAACC,8GAAc,wBAAA,xBAACC;AADpD,AAOE,WAAA,XAACC;AAAD,AACE,AACE,uBAAA,mFAAA,1GAACC;;AAED,wDAAA,jDAACD,WAAcE;GAJnB;;AAQAL;;AAEL,yDAAA,zDAACF,2HAEA,cAAAQ,HAAKV;AAAL,AAAA,IAAAW,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASR;WAAT,AAAAS,4CAAAD,WAAA,IAAA,lEAAWE;AAAX,AACE,wDAAA,jDAACC,8CAAMd,wDAASa;;AAEnB,yDAAA,zDAACX,iIAEA,WAAKF,GAAGG;AAAR,AACE,IAAMU,OAAK,AAAA,mFAAOb;IACZe,UAAQ,6CAAA,qJAAA,hLAAM,AAACC,oBAAUH,OACf,2BAAA,3BAACR,8GAAc,AAACC,wBAAUO;AAF1C,AAGE,wDAAA,jDAACC,8CAAMd,gFAAqBe;;AAEjC,yDAAA,zDAACE,6HAEA,WAAAC,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAC,4BAAAD;SAAA,AAAAnB,4CAAAmB,eAAA,hEAAapB;IAAbsB,aAAAH;QAAA,AAAAP,4CAAAU,WAAA,IAAA,/DAAmBnB;WAAnB,AAAAS,4CAAAU,WAAA,IAAA,lEAAqBC;AAArB,AAAA,kDAAA,ieAAA,kDAAA,mFAAA,mFAAA,zoBACO,iDAAA,6EAAA,2CAAA,0DAAA,2DAAA,0EAAA,4DAAA,paAACT,8CAAMd,gTACiC,AAAQuB,sXAE7BA;;AAE3B,qBAAA,rBAACC,gGAEA,WAAKD;AAAL,AACE,IAAME,SAAO,KAAAC;AAAb,AACE,CAAM,AAAUD,gBACV,WAAKE;AAAL,AACE,IAAMC,UAAQ,AAAA,AAAID;AAAlB,AACE,8BAAA,mFAAA,1GAACnB,oMAAsCoB;;;AACjD,CAAM,AAAcH,oBACd,WAAKE;AAAL,AACE,oBAAM,AAAoBA;AAA1B,AACE,IAAME,WAAS,CAAG,AAAUF,WAAG,AAASA;AAAxC,AACE,8BAAA,mFAAA,gGAAA,2CAAA,0DAAA,2DAAA,1WAACnB,saAEuB,CAAA,QAAOqB;;AAJnC;;;;AAKR,OAAaJ,kBAAOF;;AAEzB,yDAAA,zDAACrB,yJAEA,cAAA4B,HAAK9B;AAAL,AAAA,IAAA+B,aAAAD;QAAA,AAAAlB,4CAAAmB,WAAA,IAAA,/DAAS5B;YAAT,AAAAS,4CAAAmB,WAAA,IAAA,nEAAWC;AAAX,AACE,yDAAA,lDAACC,+CAAOjC,gFAAqBkC,gBAAMF;;AAEtC,yDAAA,zDAACf,mJAEA,WAAAkB,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAhB,4BAAAgB;SAAA,AAAApC,4CAAAoC,eAAA,hEAAarC;IAAbsC,aAAAF;QAAA,AAAAxB,4CAAA0B,WAAA,IAAA,/DAAmBnC;WAAnB,AAAAS,4CAAA0B,WAAA,IAAA,lEAAqBC;AAArB,AACE,IAAMC,SAAO,sDAAA,tDAACC,6DAAmBF;IAC3BG,eAAa,AAACC,gBAAMH;AAD1B,AAAA,kDAAA,ikBAAA,kDAAA,mFAAA,mFAAA,wEAAA,2CAAA,2DAAA,mEAAA,IAAA,iEAAA,OAAA,tiCAEO,iDAAA,6EAAA,2CAAA,0DAAA,kEAAA,kFAAA,6EAAA,IAAA,4DAAA,pgBAAC1B,8CAAMd,4TAEc0C,wiBAGGH,yNAGO,AAACI,gBAAMJ;;AAEhD,qBAAA,rBAACf,6FAEA,WAAAoB;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAxB,4BAAAwB;WAAA,AAAA5C,4CAAA4C,eAAA,lEAAaN;kBAAb,AAAAtC,4CAAA4C,eAAA,zEAAkBC;iBAAlB,AAAA7C,4CAAA4C,eAAA,xEAA8BE;mBAA9B,AAAA9C,4CAAA4C,eAAA,1EAAyCG;AAAzC,AACE,IAAMC,kBAAU,CAAGH,cAAYC;IACzBG,gBAAQ,iBAAAC,kBAAK,CAAGF,kBAAUF;IAAlBK,kBAA8BJ;AAA9B,AAAA,SAAAG,kBAAAC,mBAAAD,kBAAAC;;IACRC,wBAAU,CAAIH,iBAAQF;IACtBnB,iBAAS,CAAGqB,gBAAQF;AAH1B,AAKE,GAAIK;AAEF,IAAMC,6JAAUf,vBACD,4BAAA,cAAA,1CAACgB,vBACD,sEAAA,MAAA,5EAACA,pBACD,AAACC,1BACD,AAACC,nDACD,oLAAA,pLAACC;IACVC,qBAAa,6CAAA,7CAACC,+EAAS,+CAAA,WAAAC,1DAACC;AAAD,AAAS,6CAAA,rCAAI,gBAAAD,hBAAClB;GAAYW;IAGjDnD,UAAE,uBAAA,mFAAA,gGAAA,2CAAA,0DAAA,8EAAA,4DAAA,MAAA,/bAACK,ggBAGyB,AAACmC,gBAAMgB;IAGnCxD,cAAE,WAAA,XAACI;AAAD,AACE,AAEE,uBAAA,mFAAA,gGAAA,2CAAA,0DAAA,2EAAA,4DAAA,tbAACC;;AAID,IAAMuD,mBAAiB,AAACD,+CAAOE,wCAAoBL;IAC7CM,iBAAe,AAACC,mBAASC,mCAAqBJ;IAE9C5D,cAAE,uBAAA,mFAAA,gGAAA,2CAAA,0DAAA,mFAAA,4DAAA,9bAACK;IAKH4D,qBAAmB,AAACN,+CAAO,WAAKjD;AAAL,AACD,SAAK,AAACwD,iDAA6BxD,WAC9B,AAACyD,cAAI,AAACN,wCAAoBnD;GACjC8C;IAGxBY,cAAY,AAAC5B,gBAAMgB;IACnBa,eAAa,AAAC7B,gBAAMoB;IACpBU,iBAAe,AAAC9B,gBAAMyB;IAGtBM,wBAAsB,6CAAA,7CAACd,gFACE,AAACe,4CAAI,WAAAC;AAAA,AAAA,IAAAC,aAAAD;WAAA,AAAAhE,4CAAAiE,WAAA,IAAA,lEAAMC;gBAAN,AAAAlE,4CAAAiE,WAAA,IAAA,vEAAWvB;AAAX,AAAA,0FACGwB,KAAK,AAACC,gDAAQ,AAACC,6CAAKC,YAAEtC,iBAAOW;GAChCW;IAC9BiB,kBAAgB,AAACH,gDAAQ,AAACC,6CAAKC,YAAEtC,iBAAOyB;YAvB9C,2CAAA,gFAAA,yDAAA,2CAAA,oEAAA,iFAAA,iQAAA,8DAAA,2CAAA,sEAAA,uEAAA,n3BAyBMe,uHAAoBZ,uKACGC,wEACEE,gFACD,6CAAA,7CAACU,kDAAQ,AAACL,gDAAQ,AAACC,6CAAKC,YAAEtC,iBAAOoB,2LAChCU,sEACDS,0EACC,6CAAA,7CAACE,kDAAQF;AA/BxC,AAiCE,uBAAA,mFAAA,gGAAA,2CAAA,0DAAA,qDAAA,4DAAA,haAAC1E;;AAGD,8BAAA,mFAAA,1GAACA,0LAAiC2E;GA3CxC;AAfR,AAAA;AAgEA,AACE,uBAAA,mFAAA,gGAAA,2CAAA,0DAAA,kEAAA,iGAAA,ldAAC3E,8bAE+B,eAAA,dAAKsC,+EACb,CAAA,QAAOjB;;AAC/B,WAAA,XAACtB;AAAD,AACE,mCAAA,mFAAA,kFAAA,2CAAA,2DAAA,uFAAA,4EAAA,1cAAC8E,kSACwB9C,wEACO,eAAA,dAAKO,oFACNC,gFACEC;GALnC;;;AA7ER;;AAsFD,yDAAA,zDAAC/B,2IAEA,WAAAqE,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAnE,4BAAAmE;SAAA,AAAAvF,4CAAAuF,eAAA,hEAAaE;IAAbD,aAAAF;QAAA,AAAA3E,4CAAA6E,WAAA,IAAA,/DAAmBtF;aAAnB,AAAAS,4CAAA6E,WAAA,IAAA,pEAAqBE;AAArB,AAAA,kDAAA,kDAAA,mFAAA,mFAAA,wEACwBA;;AAEzB,yDAAA,zDAACzF,yIAEA,cAAA0F,HAAK5F;AAAL,AAAA,IAAA6F,aAAAD;QAAA,AAAAhF,4CAAAiF,WAAA,IAAA,/DAAS1F;YAAT,AAAAS,4CAAAiF,WAAA,IAAA,nEAAWV;AAAX,AACE,+DAAA,kIAAA,6EAAA,2CAAA,0DAAA,5WAACrE,qDAAMd,6EACgBmF;;AAG1B,yDAAA,zDAACjF,+IAEA,WAAKF,GAAGG;AAAR,AACE,yDAAA,lDAAC8B,+CAAOjC,0FAA0BsE;;AAGrC,iCAAA,jCAAMwB;AAAN,AACE,WAAA,AAAAC,PAAMlF,uBAAM,sDAAA,mFAAA,zIAACoF;AAAb,AAAA,0FAAA,mHAAA,mFAAA,gNAAA,mFAAA,iHAAA,mFAAA,mXAAA,2CAAA,qDAAA,OAAA,2DAAA,mEAAA,cAAA,+DAAA,WAAAD,viCAEwC,qBAAA,rBAACE,u4BAI5BrF;AANb,AAQkB,8BAAA,mFAAA,1GAACL,4KAA0B,AAAA,AAAAwF;mBAR7C,mFAAA,kYAAA,2CAAA,6DAAA;AAAA,AAUiB,8BAAA,mFAAA,1GAACxF;WACb,qBAAA,rBAAC0F;;AAER,gCAAA,hCAAMC;AAAN,AACE,WAAA,AAAAJ,PAAMlF,uBAAM,sDAAA,mFAAA,zIAACoF;IACPG,eAAa,AAACC,yBAAWxF;IACzByF,UAAQ,+BAAA,iDAAA,9EAAM,AAACC,cAAIH,eAAc,AAACjC,mCAAqBiC;IACvDI,mBAAiB,+BAAA,mEAAA,hGAAM,AAACD,cAAIH,eAAc,AAACK,qDAAuCL;IAClFM,sBAAoB,iBAAAC,oBAAK,AAACJ,cAAIH;AAAV,AAAA,GAAAO;AAAwB,OAAC3C,wCAAoBoC;;AAA7CO;;;IACpBC,wBAAsB,mCAAA,jCAAK,AAACL,cAAIH,qBACN,AAAC9B,cAAIoC,0BACL,AAACrC,iDAA6B+B;AAP9D,AAAA,0FAAA,oFASG,wCAAA,mFAAA,zHAAI,AAACS,uBAAOT,4KACQ,sIAAA,2HAAA,pNAAK,qBAAA,rBAACF,yIAAoB,qBAAA,rBAACA,2HAAY,qBAAA,rBAACA,gHAC1D,uCAAA,mFAAA,0oBAAA,yBAAA,mFAAA,iqBAAA,AAAA,mFAAA,llDACEQ,qLAEC,CAAA,kBAAA,+HAAA,kJAAA,yIAAA,vaAAUN,+DAAmB,qBAAA,rBAACF,6HAAa,qBAAA,rBAACA,kJAAwB,qBAAA,rBAACA,yIAChE,2BAAA,4CAAA,rDAAMI,SAAQ,AAACQ,mCAAkBR,oCAEvCM,uLAEC,CAAA,kBAAA,+HAAA,uJAAA,yIAAA,5aAAUR,+DAAmB,qBAAA,rBAACF,6HAAa,qBAAA,rBAACA,uJAA0B,qBAAA,rBAACA,yIAClE,oCAAA,qDAAA,vEAAMM,kBAAiB,AAACM,mCAAkBN,sMAI/C,CAAA,kBAAA,bAAUJ,+DAAmB,qBAAA,rBAACF;;;AAExC,sCAAA,tCAAMa;AAAN,AACE,cAAA,AAAAhB,VAAMhF,0BAAS,sDAAA,mFAAA,zIAACkF;WAAhB,AAAAF,PACMlF,uBAAM,sDAAA,mFAAA,zIAACoF;IACPG,eAAa,AAACC,yBAAWxF;IACzBmG,eAAa,qDAAA,iDAAA,pFAAM,AAAChG,oBAAUoF,eAAc,AAACjC,mCAAqBiC;IAClEI,mBAAiB,qDAAA,mEAAA,tGAAM,AAACxF,oBAAUoF,eAAc,AAACK,qDAAuCL;IACxFM,sBAAoB,iBAAAC,oBAAK,GAAA,iBAAA,hBAAOK;AAAZ,AAAA,GAAAL;AAA0B,OAAC3C,wCAAoBoC;;AAA/CO;;;IACpBC,wBAAsB,0CAAA,xCAAK,AAACtC,cAAIoC,4BACP,AAACH,cAAIH,mBACL,AAAC/B,iDAA6B+B;AAR7D,AAAA,0FAAA,mDAUG,kBAAM,iBAAAO,oBAAK5F;AAAL,AAAA,oBAAA4F;AAAa,OAACJ,cAAIxF;;AAAlB4F;;MAAN,AAAA,mFAAA,gIAAA,mFAAA,2QAAA,yHAAA,mFAAA,kJAAA,mFAAA,2VAAA,2CAAA,wKAAA,mFAAA,7pCAE+D,qBAAA,rBAACT,8LAC5DC,4xBAIS,0EAAA,AAAA,wBAAA,hGAAM,EAAK,AAAC7B,cAAIoC,0BAAqB,GAAKE,gTAEjD,wIAAA,+HAAA,rPACEF,qBAAoB,qBAAA,rBAACR,mGACrBU,uBAAsB,qBAAA,rBAACV,sGACjB,qBAAA,rBAACA;WAZf,mFAAA,8MAAA,mFAcOe,iCAAmBpG,KACnB,oDAAA,0CAAA,AAAA,5EACE6F,qBAAoBM,eACpBJ,uBAAsBJ;GAExB,iBAAAU,mBAAIR;AAAJ,AAAA,oBAAAQ;AAAAA;;AAAwBN;;6CAnB/B;;AAqBL,iCAAA,jCAAMO;AAAN,AAAA,0FAAA,sNAAA,mFAAA,kPAAA,mFAAA,qLAAA,mFAAA,uLAAA,mFAAA,wLAAA,mFAAA,6LAAA,mFAAA,oIAAA,mFAAA,iEAAA,mFAAA,yDAAA,mFAAA,sNAAA,uFAAA,YAAA,oFAAA,8CAAA,mFAAA,8OAAA,2CAAA,6DAAA,vkFAEmD,qBAAA,rBAACjB,wQAChC,qBAAA,rBAACA,wQAED,qBAAA,rBAACA,0QACD,qBAAA,rBAACA,2QACD,qBAAA,rBAACA,2yBAI4B,qBAAA,rBAACA,6GAAyB,qBAAA,rBAACA;AAX5E,AAcmB,8BAAA,mFAAA,kEAAA,5KAAC1F;WAdpB,iBAAA,KAAA,mFAAA,8OAAA,2CAAA,6DAAA;AAAA,AAgBmB,8BAAA,mFAAA,kEAAA,5KAACA;WAhBpB,iBAAA,KAAA,mFAAA,8OAAA,2CAAA,6DAAA;AAAA,AAkBmB,8BAAA,mFAAA,kEAAA,5KAACA;WAlBpB,iBAAA,KAAA,mFAAA,8OAAA,2CAAA,6DAAA;AAAA,AAoBmB,8BAAA,mFAAA,kEAAA,5KAACA;WApBpB,mBAAA,KAAA,mFAAA,8OAAA,2CAAA,6DAAA;AAAA,AAsBmB,8BAAA,mFAAA,kEAAA,5KAACA;WAtBpB,iBAAA,KAAA,mFAAA,8OAAA,2CAAA,6DAAA;AAAA,AAwBmB,8BAAA,mFAAA,kEAAA,5KAACA;WAxBpB,mBAAA,KAAA,mFAAA,8OAAA,2CAAA,6DAAA;AAAA,AA0BmB,8BAAA,mFAAA,kEAAA,5KAACA;WA1BpB,iBAAA,KAAA,mFAAA,8OAAA,2CAAA,6DAAA;AAAA,AA4BmB,8BAAA,mFAAA,kEAAA,5KAACA;WA5BpB,iBAAA,KAAA,mFAAA,8OAAA,2CAAA,6DAAA;AAAA,AA8BmB,8BAAA,mFAAA,kEAAA,5KAACA;WA9BpB,iBAAA,KAAA,mFAAA,8OAAA,2CAAA,6DAAA;AAAA,AAgCmB,8BAAA,mFAAA,kEAAA,5KAACA;WAhCpB,mCAAA,mFAAA,iEAAA,mFAAA,yDAAA,mFAAA,2NAAA,uFAAA,YAAA,mFAAA,8CAAA,mFAAA,8OAAA,2CAAA,6DAAA,3vBAmCiD,qBAAA,rBAAC0F,kHAA2B,qBAAA,rBAACA;AAnC9E,AAsCmB,8BAAA,mFAAA,kEAAA,5KAAC1F;WAtCpB,iBAAA,KAAA,mFAAA,8OAAA,2CAAA,6DAAA;AAAA,AAwCmB,8BAAA,mFAAA,kEAAA,5KAACA;WAxCpB,eAAA,KAAA,mFAAA,8OAAA,2CAAA,6DAAA;AAAA,AA0CmB,8BAAA,mFAAA,kEAAA,5KAACA;WA1CpB,iBAAA,KAAA,mFAAA,8OAAA,2CAAA,6DAAA;AAAA,AA4CmB,8BAAA,mFAAA,kEAAA,5KAACA;WA5CpB;;AA8CA,mCAAA,nCAAM4G;AAAN,AACE,qBAAA,AAAArB,jBAAMsB,iCAAU,sDAAA,mFAAA,zIAACpB;AAAjB,AAAA,0FAAA,+FAAA,mFAAA,uUAAA,2CAAA,6DAAA;AAAA,AAGgB,AACC,uBAAA,mFAAA,1GAACzF;;AAED,OAACD,WACA;AAAA,AACE,IAAM+G,OAAK,AAAQC;IACbC,2BAAmB,AAAClD,cAAI+C;AAD9B,AAEE,oBAAMC;AAAN,AAEE,sBAAA,tBAAS,AAAaA;;AAEtB,GAAME;AAAN,AACE,0BAAA,nBAAM,AAAaF;;AADrB;;;AAJF;;GAJL;WANjB,mFAAA,sQAAA,mFAAA,uPAAA,2CAAA,iIAAA,mFAAA,yQAAA,2CAAA,pkCAiBgB,AAACpB,qBAAE,kCAAA,kEAAA,lFAAImB,6kBAEV,kCAAA,gBAAA,hCAAIA,sfAEH,kCAAA,gBAAA,hCAAIA;;AAGpB,mCAAA,nCAAMI;AAAN,AACE,uBAAA,AAAA1B,nBAAM2B,mCAAkB,sDAAA,mFAAA,zIAACzB;YAAzB,AAAAF,RACMZ,wBAAO,sDAAA,mFAAA,zIAACc;AADd,AAAA,0FAAA,qNAAA,mFAAA,wHAAA,mFAAA,6OAAA,mFAAA,w9DAAA,mFAAA,4aAAA,mFAAA,oEAAA,2CAAA,qDAAA,OAAA,yDAAA,OAAA,x9FAI+C,qBAAA,rBAACC,2RAE3C,4PAAA,KAAA,AAAA,mFAAA,kGAAA,mFAAA,kJAAA,2CAAA,wDAAA,6BAAA,oDAAA,OAAA,2DAAA,oBAAA,mFAAA,gFAAA,2CAAA,iDAAA,KAAA,gDAAA,KAAA,+CAAA,KAAA,yDAAA,eAAA,oEAAA,oBAAA,mFAAA,2EAAA,2CAAA,oDAAA,eAAA,+CAAA,3uDAAU,EAAI,qBAAA,pBAAMwB,+BAAkB,uJAAA,vJAACC,6CAAE,AAAA,wFAASD,mlFAWpC,WAAK/F;AAAL,AACC,IAAAiG,sBAAoBjG,DAAmB,CAAA,AAAA,eAAA;AAAvC,AAAA,oBAAAiG;AAAA,AAAA,WAAAA,PAAWrG;AAAX,AACE,8BAAA,mFAAA,1GAACf,8KAA2Be;;AAD9B;;uIAlBpB,mFAAA,vMAoBM,qBAAA,rBAAC2E,uTAEgC,qBAAA,rBAACA,6HAGrC,oCAAA,AAAA,mFAAA,rGAAMwB,kKAEH,iBAAAG,WAAM,AAAA,wFAASH;IAAfG,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,0FAAA,mDAAA,mFAAA,yGAII,6CAAK,qBAAA,rBAAC3B,iGAAmB,iBAAA0B,qBAAgB,AAAA,8FAAYF;AAA5B,AAAA,oBAAAE;AAAA,AAAA,WAAAA,PAAWG;AAAX,AAA+C,QAAA,iDAAUA;;AAAzD;;uBAJ7B,mFAAA,2JAAA,mFAAA,iKAAA,2CAAA,uDAAA,2CAAA,uDAOqB,0JAAA,7GAAK,AAAA,0FAAWL;;;KAPrC;AAAA,0FAAA,mDAAA,mFAAA,wnBAAA,mFAAA,2JAAA,mFAAA,iKAAA,2CAAA,uDAAA,2CAAA,9nCAYI,8JAAA,+KAAA,sKAAA,tcAAK,qBAAA,rBAACxB,kKACD,AAAA,2GAAmBwB,mEAEnB,AAAA,mGAAeA,qtBAIH,0JAAA,7GAAK,AAAA,0FAAWA;;;KAnBrC;AAAA,0FAAA,mDAAA,mFAAA,wbAAA,mFAAA,2JAAA,mFAAA,iKAAA,2CAAA,uDAAA,2CAAA,97BAwBI,kJAAA,kKAAA,vQAAK,qBAAA,rBAACxB,qJAAyB,AAAA,+FAAawB,otBAG3B,0JAAA,7GAAK,AAAA,0FAAWA;;;KA3BrC;AAAA,0FAAA,mDAAA,mFAAA,+ZAAA,mFAAA,2JAAA,mFAAA,iKAAA,2CAAA,uDAAA,2CAAA,r6BA+BoC,kJAAA,rGAAK,qBAAA,rBAACxB,qJAAyB,qBAAA,rBAACA,0xBAG/C,0JAAA,7GAAK,AAAA,0FAAWwB;;;KAlCrC;AAAA,0FAAA,mDAAA,mFAAA,oaAAA,mFAAA,2JAAA,mFAAA,iKAAA,2CAAA,uDAAA,2CAAA,16BAsCoC,kJAAA,rGAAK,qBAAA,rBAACxB,qJAAyB,qBAAA,rBAACA,+xBAG/C,0JAAA,7GAAK,AAAA,0FAAWwB;;;KAzCrC;AAAA,0FAAA,yGA4CmC,mJAAA,tGAAK,qBAAA,rBAACxB;;;KA5CzC;AA+CE,oBAAMf;AAAN,AAAA,0FAAA,2GAEG,gJAAA,6jBAAA,hqBAAK,qBAAA,rBAACe,oJACD,CAAG,qDAAA,mFAAA,yDAAA,jMAAC8B,+CAAO7C,oNACR,qDAAA,mFAAA,8DAAA,tMAAC6C,+CAAO7C,yQACP,qBAAA,rBAACe;;AALb;;;;;AA/CF;;;aAFH;;AA2DL,oCAAA,pCAAM+B;AAAN,AACE,YAAA,AAAAlC,RAAMZ,wBAAO,sDAAA,mFAAA,zIAACc;AAAd,AACE,oBAAMd;AAAN,AAAA,0FAAA,sNAAA,mFAAA,uOAAA,mFAAA,yIAAA,mFAAA,6LAAA,mFAAA,6OAAA,mFAAA,uNAAA,mFAAA,6LAAA,mFAAA,qYAAA,mFAAA,yNAAA,mFAAA,6LAAA,mFAAA,0YAAA,mFAAA,oOAAA,mFAAA,8DAAA,mFAAA,yaAAA,mFAAA,98HAEmD,qBAAA,rBAACe,2xBAIL,AAAA,kGAAcf,mMAC3B,qBAAA,rBAACe,qlBAGY,qDAAA,mFAAA,yDAAA,jMAAC8B,+CAAO7C,8YACrB,qBAAA,rBAACe,ulBAGY,qDAAA,mFAAA,8DAAA,tMAAC8B,+CAAO7C,mZACrB,qBAAA,rBAACe,0eAIe,CAAA,wJAAA,lGAAe,qBAAA,rBAACA,kJAAwB,qBAAA,rBAACA,8QAEtF,iBAAAgC,qBAAA,0DAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAP,qBAAA,AAAArB,cAAA4B;AAAA,AAAA,GAAAP;AAAA,AAAA,IAAAO,eAAAP;AAAA,AAAA,GAAA,AAAAS,6BAAAF;AAAA,IAAAG,kBA4/D0C,AAAA8C,sBAAAjD;IA5/D1CI,qBAAA,AAAA5F,gBAAA2F;IAAAE,WAAA,AAAAC,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAG,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAH;AAAA,WAAA,AAAAI,eAAAL,gBAAAI,tCAAM7H;AAAN,AAAA,AAAA,AAAA+H,uBAAAJ,SAAA,oBAAA,mFAAA,6QAAA,2CAAA,6DAAA;;AAAA,AAGe,8BAAA,mFAAA,1GAAChI,4KAA0BK;;sBAH1C,2CAAA,oDACSA,5GAGNA;;AAJH,eAAA,CAAA6H,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,gDAAA,AAAAC,qBAAAb;;AAAA,OAAAU,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,WAAA,AAAAS,gBAAAd,vBAAMtH;AAAN,AAAA,OAAAqI,eAAA,oBAAA,mFAAA,6QAAA,2CAAA,6DAAA;;AAAA,AAGe,8BAAA,mFAAA,1GAAC1I,4KAA0BK;;sBAH1C,2CAAA,kEAAA,AAAAkI,gDAAA,AAAAI,eAAAhB,7EACStH,5GAGNA;;;AAJH;;;;GAAA,KAAA;;AAAA,AAAA,OAAAqH,mBAAW,qDAAA,mFAAA,yDAAA,jMAACF,+CAAO7C;qBArBxB,mFAAA,8DAAA,mFAAA,8aAAA,mFAAA,9XA6BkD,CAAA,6JAAA,vGAAe,qBAAA,rBAACe,uJAA0B,qBAAA,rBAACA,8QAExF,iBAAAgC,qBAAA,0DAAAkB;AAAA,AAAA,YAAAhB,kBAAA,KAAA;AAAA,AAAA,IAAAgB,eAAAA;;AAAA,AAAA,IAAAxB,qBAAA,AAAArB,cAAA6C;AAAA,AAAA,GAAAxB;AAAA,AAAA,IAAAwB,eAAAxB;AAAA,AAAA,GAAA,AAAAS,6BAAAe;AAAA,IAAAd,kBAk/D0C,AAAA8C,sBAAAhC;IAl/D1Cb,qBAAA,AAAA5F,gBAAA2F;IAAAe,WAAA,AAAAZ,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAe,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAf;AAAA,WAAA,AAAAI,eAAAL,gBAAAgB,tCAAMzI;AAAN,AAAA,AAAA,AAAA+H,uBAAAS,SAAA,oBAAA,mFAAA,6QAAA,2CAAA,6DAAA;;AAAA,AAGe,8BAAA,mFAAA,1GAAC7I,4KAA0BK;;sBAH1C,2CAAA,oDACSA,5GAGNA;;AAJH,eAAA,CAAAyI,WAAA;;;;AAAA;;;;;AAAA,OAAAT,qBAAA,AAAAC,gBAAAO,UAAA,AAAAE,gDAAA,AAAAP,qBAAAI;;AAAA,OAAAP,qBAAA,AAAAC,gBAAAO,UAAA;;;AAAA,WAAA,AAAAJ,gBAAAG,vBAAMvI;AAAN,AAAA,OAAAqI,eAAA,oBAAA,mFAAA,6QAAA,2CAAA,6DAAA;;AAAA,AAGe,8BAAA,mFAAA,1GAAC1I,4KAA0BK;;sBAH1C,2CAAA,kEAAA,AAAA0I,gDAAA,AAAAJ,eAAAC,7EACSvI,5GAGNA;;;AAJH;;;;GAAA,KAAA;;AAAA,AAAA,OAAAqH,mBAAW,qDAAA,mFAAA,8DAAA,tMAACF,+CAAO7C;qBA/BxB,mFAAA,mDAAA,mFAAA,ihBAAA,mFAAA,jeAuCkD,wHAAA,sHAAA,jMAAK,qBAAA,rBAACe,2HAAY,qBAAA,rBAACA,sHAAW,qBAAA,rBAACA,mUAE5E,iBAAAgC,qBAAA,0DAAAsB;AAAA,AAAA,YAAApB,kBAAA,KAAA;AAAA,AAAA,IAAAoB,eAAAA;;AAAA,AAAA,IAAA5B,qBAAA,AAAArB,cAAAiD;AAAA,AAAA,GAAA5B;AAAA,AAAA,IAAA4B,eAAA5B;AAAA,AAAA,GAAA,AAAAS,6BAAAmB;AAAA,IAAAlB,kBAw+D0C,AAAA8C,sBAAA5B;IAx+D1CjB,qBAAA,AAAA5F,gBAAA2F;IAAAmB,WAAA,AAAAhB,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAmB,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAnB;AAAA,IAAAoB,aAAA,AAAAhB,eAAAL,gBAAAoB;cAAA,AAAA9I,4CAAA+I,WAAA,IAAA,rEAAOrD;YAAP,AAAA1F,4CAAA+I,WAAA,IAAA,nEAAerG;AAAf,AAAA,GACY,AAACiD,cAAIjD;AADjB,IAEYwG,YAAU,AAAChD,mCAAkBR;IAC7ByD,YAAU,6CAAA,7CAAC3E,iDAAO9B;AAH9B,AAAA,AAAA,AAAAsF,uBAAAa,SAAA,oBAAA,mFAAA,yGAAA,mFAAA,khBAAA,mFAAA,leAOI,wDAAA,6HAAA,yEAAA,2HAAA,5UAAKK,2DAAc,qBAAA,rBAAC5D,8HAAc,AAACvD,gBAAMW,wDAAW,qBAAA,rBAAC4C,iRAErD,iBAAAgC,qBAAA;+EAAA8B;AAAA,AAAA,YAAA5B,kBAAA,KAAA;;AAAA,AAAA,IAAA4B,eAAAA;;AAAA,AAAA,IAAApC,yBAAA,AAAArB,cAAAyD;AAAA,AAAA,GAAApC;AAAA,AAAA,IAAAoC,eAAApC;AAAA,AAAA,GAAA,AAAAS,6BAAA2B;AAAA,IAAA1B,sBA+9DsC,AAAA8C,sBAAApB;IA/9DtCzB,yBAAA,AAAA5F,gBAAA2F;IAAA2B,WAAA,AAAAxB,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAA2B,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAA3B;AAAA,WAAA,AAAAI,eAAAL,oBAAA4B,1CAAMrJ;AAAN,AAAA,AAAA,AAAA+H,uBAAAqB,SAAA,oBAAA,mFAAA,kRAAA,2CAAA,6DAAA;;AAAA,AAGe,8BAAA,mFAAA,1GAACzJ,4KAA0BK;;sBAH1C,2CAAA,oDACSA,5GAGNA;;AAJH,eAAA,CAAAqJ,WAAA;;;;AAAA;;;;;AAAA,OAAArB,qBAAA,AAAAC,gBAAAmB,UAAA,AAAAE,8DAAA,AAAAnB,qBAAAgB;;AAAA,OAAAnB,qBAAA,AAAAC,gBAAAmB,UAAA;;;AAAA,WAAA,AAAAhB,gBAAAe,vBAAMnJ;AAAN,AAAA,OAAAqI,eAAA,oBAAA,mFAAA,kRAAA,2CAAA,6DAAA;;AAAA,AAGe,8BAAA,mFAAA,1GAAC1I,4KAA0BK;;sBAH1C,2CAAA,kEAAA,AAAAsJ,8DAAA,AAAAhB,eAAAa,3FACSnJ,5GAGNA;;;AAJH;;;;;CAAA,KAAA;;;AAAA,AAAA,OAAAqH,mBAAW6B;qBATf,2CAAA,oDAISzD;;AAJT,eAAA,CAAAoD,WAAA;;;;AAAA,eAAA,CAAAA,WAAA;;;;;AAAA;;;;;AAAA,OAAAb,qBAAA,AAAAC,gBAAAW,UAAA,AAAAG,gDAAA,AAAAZ,qBAAAQ;;AAAA,OAAAX,qBAAA,AAAAC,gBAAAW,UAAA;;;AAAA,IAAAI,aAAA,AAAAZ,gBAAAO;cAAA,AAAA5I,4CAAAiJ,WAAA,IAAA,rEAAOvD;YAAP,AAAA1F,4CAAAiJ,WAAA,IAAA,nEAAevG;AAAf,AAAA,GACY,AAACiD,cAAIjD;AADjB,IAEYwG,YAAU,AAAChD,mCAAkBR;IAC7ByD,YAAU,6CAAA,7CAAC3E,iDAAO9B;AAH9B,AAAA,OAAA4F,eAAA,oBAAA,mFAAA,yGAAA,mFAAA,khBAAA,mFAAA,leAOI,wDAAA,6HAAA,yEAAA,2HAAA,5UAAKY,2DAAc,qBAAA,rBAAC5D,8HAAc,AAACvD,gBAAMW,wDAAW,qBAAA,rBAAC4C,iRAErD,iBAAAgC,qBAAA;+EAAAkC;AAAA,AAAA,YAAAhC,kBAAA,KAAA;;AAAA,AAAA,IAAAgC,eAAAA;;AAAA,AAAA,IAAAxC,yBAAA,AAAArB,cAAA6D;AAAA,AAAA,GAAAxC;AAAA,AAAA,IAAAwC,eAAAxC;AAAA,AAAA,GAAA,AAAAS,6BAAA+B;AAAA,IAAA9B,kBA+9DsC,AAAA8C,sBAAAhB;IA/9DtC7B,qBAAA,AAAA5F,gBAAA2F;IAAA+B,WAAA,AAAA5B,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAA+B,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAA/B;AAAA,WAAA,AAAAI,eAAAL,gBAAAgC,tCAAMzJ;AAAN,AAAA,AAAA,AAAA+H,uBAAAyB,SAAA,oBAAA,mFAAA,kRAAA,2CAAA,6DAAA;;AAAA,AAGe,8BAAA,mFAAA,1GAAC7J,4KAA0BK;;sBAH1C,2CAAA,oDACSA,5GAGNA;;AAJH,eAAA,CAAAyJ,WAAA;;;;AAAA;;;;;AAAA,OAAAzB,qBAAA,AAAAC,gBAAAuB,UAAA,AAAAE,8DAAA,AAAAvB,qBAAAoB;;AAAA,OAAAvB,qBAAA,AAAAC,gBAAAuB,UAAA;;;AAAA,WAAA,AAAApB,gBAAAmB,vBAAMvJ;AAAN,AAAA,OAAAqI,eAAA,oBAAA,mFAAA,kRAAA,2CAAA,6DAAA;;AAAA,AAGe,8BAAA,mFAAA,1GAAC1I,4KAA0BK;;sBAH1C,2CAAA,kEAAA,AAAA0J,8DAAA,AAAApB,eAAAiB,3FACSvJ,5GAGNA;;;AAJH;;;;;CAAA,KAAA;;;AAAA,AAAA,OAAAqH,mBAAW6B;qBATf,2CAAA,qEAAA,AAAAH,gDAAA,AAAAT,eAAAK,hFAISlD;;AAJT,eAAA,AAAA6C,eAAAK;;;;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAAtB,mBAAsB,qDAAA,mFAAA,yDAAA,jMAACF,+CAAO7C;;;AAzCnC;;;AAyDJ,4BAAA,5BAAMqF;AAAN,AAAA,0FAAA,iMAAA,mFAAA,uIAAA,mFAAA,0JAAA,mFAAA,2NAAA,2CAAA,qDAAA,uCAAA,wDAAA,SAAA,mDAAA,8BAAA,mFAAA,+JAAA,mFAAA,mEAAA,2CAAA,wDAAA,6BAAA,2DAAA,YAAA,oDAAA,uBAAA,mFAAA,qDAAA,2CAAA,+CAAA,niDAGa,qBAAA,rBAACtE,wzBAKG,qBAAA,rBAACA;;AASlB,gCAAA,hCAAMuE;AAAN,AACE,qBAAA,AAAA1E,jBAAM2E,iCAAgB,sDAAA,mFAAA,zIAACzE;2BAAvB,AAAAF,vBACM4E,uCAAgB,sDAAA,mFAAA,zIAAC1E;IACjB2E,aAAK,4DAAA,5DAACjD,6CAAE+C;AAFd,AAAA,0FAAA,kKAAA,2CAAA,kEAAA,8HAAA,mFAAA,gJAAA,mFAAA,2KAAA,mFAAA,wFAAA,mFAAA,mLAAA,2CAAA,koBAAA,mFAAA,sJAAA,2CAAA,8mBAAA,mFAAA,kJAAA,2CAAA,gpBAAA,mFAAA,qFAAA,0HAAA,0HAAA,+HAAA,4HAAA,6IAAA,lxIAISA,uEACE,wCAAA,AAAA,gBAAA,tCAAMC,wiCAKF,uGAAA,2CAAA,mEAAA,rNAACE,wPAEA,wCAAA,AAAA,2CAAA,kEAAA,6EAAA,hNAAMF,oOAEf,qBAAA,rBAACzE,waAEO,uGAAA,2CAAA,mEAAA,rNAAC2E,wPAEA,wCAAA,AAAA,2CAAA,kEAAA,0CAAA,7KAAMF,iMAEf,qBAAA,rBAACzE,obAEM,cAAA,AAAA,sBAAA,lCAAM0E,gDACd,cAAA,gIAAA,5IAAIA,+FACDE,gIACA1D,0CACH,cAAA,4HAAA,xIAAIwD,+FACDxD,4HACA0D,yTAEH3D,0HACArB,0HACAiB,+HACAU,4HACAQ,6IACFuC;;AAEN,gCAAA,hCAAMO;AAAN,AACE,4BAAA,mFAAA,/GAAC1F;;AAGD,iCAAA,AAAAU,7BAAM4E,6CAAgB,sDAAA,mFAAA,zIAAC1E;IACjBqB,aAAK,AAAQC;AADnB,AAEE,oBAAM,iBAAAZ,oBAAKW;AAAL,AAAA,oBAAAX;AAAUgE;;AAAVhE;;;AAAN,AACE,yBAAA,zBAAM,AAAaW;;AADrB;;AAGF,IAAM0D,OAAK,AAACC,+BAAkB,wBAAA,xBAAiB1D;AAA/C,AACE,oEAAA,7DAAC2D,wDAAaF,wFAAMP;;AAExB,0BAAA,1BAAMU;AAAN,AACE,OAACJ","names":["re_frame.core.reg_sub","db","cljs.core.get","re_frame.core.reg_event_db","_","initial-db","wizmetria-web.sym/evaluate","wizmetria-web.sym/clean","js/setTimeout","re-frame.core/dispatch","wizmetria-web.i18n/init-click-outside","p__18017","vec__18018","cljs.core.nth","word","cljs.core.assoc","results","cljs.core/not-empty","re_frame.core.reg_event_fx","p__18021","p__18022","map__18023","cljs.core/--destructure-map","vec__18024","file","re-frame.core/reg-fx","reader","js/FileReader","e","content","progress","p__18027","vec__18028","state","cljs.core.update","cljs.core/merge","p__18031","p__18032","map__18033","vec__18034","text","chunks","cljs.core.partition_all","total-chunks","cljs.core/count","p__18038","map__18039","chunk-index","chunk-size","total-length","start-idx","end-idx","x__5090__auto__","y__5091__auto__","finished?","words","clojure.string/replace","clojure.string/trim","clojure.string/upper-case","clojure.string.split","unique-words","cljs.core.into","p1__18037#","cljs.core.filter","mirror-sym-words","wizmetria-web.sym/symmetric-word?","mirror-by-axis","cljs.core/group-by","wizmetria-web.sym/axis-id-for-word","rotation-sym-words","wizmetria-web.sym/rotation-symmetric-word?","cljs.core/not","total-words","mirror-count","rotation-count","mirror-by-axis-sorted","cljs.core.map","p__18040","vec__18041","axis","cljs.core.sort_by","cljs.core.comp","cljs.core/-","rotation-sorted","stats","cljs.core.take","re-frame.core/dispatch-sync","p__18044","p__18045","map__18046","vec__18047","__","params","p__18050","vec__18051","wizmetria-web.core/input-field","cljs.core/deref","p1__18054#","re_frame.core.subscribe","wizmetria-web.i18n/t","wizmetria-web.core/check-word","cleaned-word","wizmetria-web.util/clean","axis-id","cljs.core/seq","rotation-axis-id","wizmetria-web.sym/rotation-symmetry-axis-id-for-word","has-mirror-symmetry","and__5000__auto__","has-rotation-symmetry","cljs.core/empty?","wizmetria-web.sym/id->axis-name","wizmetria-web.core/symmetry-display","word-axis-id","wizmetria-web.grid/symmetry-view","or__5002__auto__","wizmetria-web.core/explanation","wizmetria-web.core/toggle-switch","enabled?","body","js/document","currently-enabled?","wizmetria-web.core/text-analysis","processing-state","cljs.core._EQ_","temp__5804__auto__","G__18055","cljs.core/Keyword","name","cljs.core.get_in","wizmetria-web.core/wordlist-stats","iter__5480__auto__","s__18057","cljs.core/LazySeq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","b__18059","cljs.core/chunk-buffer","i__18058","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__18056","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","s__18061","b__18063","i__18062","iter__18060","s__18065","b__18067","i__18066","vec__18068","iter__18064","vec__18075","axis-name","top-words","s__18072","b__18074","i__18073","iter__18071","s__18079","b__18081","i__18080","iter__18078","wizmetria-web.core/footer","wizmetria-web.core/main-panel","text-direction","shiny-enabled?","rtl?","cljs.core.merge","wizmetria-web.i18n/language-selector","wizmetria-web.core/mount-root","root","reagent.dom.client/create-root","reagent.dom.client.render","wizmetria-web.core/init","cljs.core/chunk-first"],"sourcesContent":["(ns wizmetria-web.core\r\n  (:require [reagent.dom.client :as rdomc]\r\n            [re-frame.core :as rf]\r\n            [wizmetria-web.sym :as sym]\r\n            [wizmetria-web.grid :as grid]\r\n            [wizmetria-web.util :as util]\r\n            [wizmetria-web.i18n :as i18n :refer [t]]\r\n            [clojure.string :as str]))\r\n\r\n;; -- Subscriptions --\r\n(rf/reg-sub\r\n :word\r\n (fn [db]\r\n   (:word db)))\r\n\r\n(rf/reg-sub\r\n :symmetry-results\r\n (fn [db]\r\n   (:symmetry-results db)))\r\n\r\n(rf/reg-sub\r\n :wordlist-stats\r\n (fn [db]\r\n   (:wordlist-stats db)))\r\n\r\n(rf/reg-sub\r\n :processing-state\r\n (fn [db]\r\n   (:processing-state db)))\r\n\r\n(rf/reg-sub\r\n :shiny-effects-enabled\r\n (fn [db]\r\n   (get db :shiny-effects-enabled false)))\r\n\r\n;; -- Events --\r\n(rf/reg-event-db\r\n :initialize\r\n (fn [_ _]\r\n   ;; First create a basic app DB\r\n   (let [initial-db {:word \"WIZARD\"\r\n                     :symmetry-results (sym/evaluate [(sym/clean \"WIZARD\")])\r\n                     :wordlist-stats nil\r\n                     :processing-state nil\r\n                     :shiny-effects-enabled false}]\r\n     \r\n     ;; Initialize language separately\r\n     (js/setTimeout \r\n      #(do\r\n         (rf/dispatch [:init-language])\r\n         ;; Initialize the click outside handler for language dropdown after DOM is ready\r\n         (js/setTimeout i18n/init-click-outside 100))\r\n      100)\r\n     \r\n     ;; Return the initial database\r\n     initial-db)))\r\n\r\n(rf/reg-event-db\r\n :update-word\r\n (fn [db [_ word]]\r\n   (assoc db :word word)))\r\n\r\n(rf/reg-event-db\r\n :check-symmetry\r\n (fn [db _]\r\n   (let [word (:word db)\r\n         results (when (not-empty word)\r\n                   (sym/evaluate [(sym/clean word)]))]\r\n     (assoc db :symmetry-results results))))\r\n\r\n(rf/reg-event-fx\r\n :process-file\r\n (fn [{:keys [db]} [_ file]]\r\n   {:db (assoc db :processing-state {:status :reading \r\n                                     :file-name (.-name file)\r\n                                     :progress 0})\r\n    :fx [[:read-file-async file]]}))\r\n\r\n(rf/reg-fx\r\n :read-file-async\r\n (fn [file]\r\n   (let [reader (js/FileReader.)]\r\n     (set! (.-onload reader)\r\n           (fn [e]\r\n             (let [content (.. e -target -result)]\r\n               (rf/dispatch [:prepare-text-processing content]))))\r\n     (set! (.-onprogress reader)\r\n           (fn [e]\r\n             (when (.-lengthComputable e)\r\n               (let [progress (/ (.-loaded e) (.-total e))]\r\n                 (rf/dispatch [:update-processing-progress\r\n                              {:status :reading\r\n                               :progress (* 100 progress)}])))))\r\n     (.readAsText reader file))))\r\n\r\n(rf/reg-event-db\r\n :update-processing-progress\r\n (fn [db [_ state]]\r\n   (update db :processing-state merge state)))\r\n\r\n(rf/reg-event-fx\r\n :prepare-text-processing\r\n (fn [{:keys [db]} [_ text]]\r\n   (let [chunks (partition-all 5000 text)\r\n         total-chunks (count chunks)]\r\n     {:db (assoc db :processing-state \r\n                {:status :processing\r\n                 :total-chunks total-chunks\r\n                 :processed-chunks 0\r\n                 :progress 0})\r\n      :fx [[:process-chunk {:text text\r\n                           :chunk-index 0\r\n                           :chunk-size 5000\r\n                           :total-length (count text)}]]})))\r\n\r\n(rf/reg-fx\r\n :process-chunk\r\n (fn [{:keys [text chunk-index chunk-size total-length]}]\r\n   (let [start-idx (* chunk-index chunk-size)\r\n         end-idx (min (+ start-idx chunk-size) total-length)\r\n         finished? (>= end-idx total-length)\r\n         progress (/ end-idx total-length)]\r\n     \r\n     (if finished?\r\n       ;; If finished, process the entire text at once\r\n       (let [words (-> text\r\n                      (str/replace #\"[^a-zA-Z\\s]\" \" \")\r\n                      (str/replace #\"\\s+\" \" \")\r\n                      (str/trim)\r\n                      (str/upper-case)\r\n                      (str/split #\"\\s+\"))\r\n             unique-words (into #{} (filter #(>= (count %) 3) words))\r\n             \r\n             ;; Update UI that we're finding symmetry\r\n             _ (rf/dispatch [:update-processing-progress \r\n                            {:status :finding-symmetry\r\n                             :progress 100\r\n                             :word-count (count unique-words)}])\r\n             \r\n             ;; Find words with symmetry (time-consuming part)\r\n             _ (js/setTimeout \r\n                #(do\r\n                   ;; Find mirror symmetry words\r\n                   (rf/dispatch [:update-processing-progress \r\n                                {:status :mirror-symmetry\r\n                                 :progress 0}])\r\n                   \r\n                   (let [mirror-sym-words (filter sym/symmetric-word? unique-words)\r\n                         mirror-by-axis (group-by sym/axis-id-for-word mirror-sym-words)\r\n                         \r\n                         _ (rf/dispatch [:update-processing-progress \r\n                                        {:status :rotational-symmetry\r\n                                         :progress 50}])\r\n                         \r\n                         ;; Find rotational symmetry words\r\n                         rotation-sym-words (filter (fn [word] \r\n                                                   (and (sym/rotation-symmetric-word? word)\r\n                                                        (not (sym/symmetric-word? word))))\r\n                                                 unique-words)\r\n                         \r\n                         ;; Prepare stats\r\n                         total-words (count unique-words)\r\n                         mirror-count (count mirror-sym-words)\r\n                         rotation-count (count rotation-sym-words)\r\n                         \r\n                         ;; Sort by length for each axis\r\n                         mirror-by-axis-sorted (into {} \r\n                                                  (map (fn [[axis words]]\r\n                                                         [axis (sort-by (comp - count) words)])\r\n                                                       mirror-by-axis))\r\n                         rotation-sorted (sort-by (comp - count) rotation-sym-words)\r\n                         \r\n                         stats {:total-words total-words\r\n                                :mirror {:count mirror-count\r\n                                         :by-axis mirror-by-axis-sorted\r\n                                         :top-10 (take 10 (sort-by (comp - count) mirror-sym-words))}\r\n                                :rotation {:count rotation-count\r\n                                          :words rotation-sorted\r\n                                          :top-10 (take 10 rotation-sorted)}}]\r\n                     \r\n                     (rf/dispatch [:update-processing-progress \r\n                                  {:status :done\r\n                                   :progress 100}])\r\n                     (rf/dispatch [:set-wordlist-stats stats])))\r\n                30) ;; Short delay for UI to update\r\n             ]\r\n         nil) ;; No immediate return, async processing\r\n       \r\n       ;; Process the next chunk\r\n       (do\r\n         (rf/dispatch [:update-processing-progress \r\n                      {:status :processing\r\n                       :processed-chunks (inc chunk-index)\r\n                       :progress (* 100 progress)}])\r\n         (js/setTimeout \r\n          #(rf/dispatch-sync [:process-next-chunk \r\n                             {:text text\r\n                              :chunk-index (inc chunk-index)\r\n                              :chunk-size chunk-size\r\n                              :total-length total-length}])\r\n          10)))) ;; Small delay to keep UI responsive\r\n   nil))\r\n\r\n(rf/reg-event-fx\r\n :process-next-chunk\r\n (fn [{:keys [__]} [_ params]]\r\n   {:fx [[:process-chunk params]]}))\r\n\r\n(rf/reg-event-db\r\n :set-wordlist-stats\r\n (fn [db [_ stats]]\r\n   (assoc db \r\n          :wordlist-stats stats\r\n          :processing-state {:status :complete})))\r\n\r\n(rf/reg-event-db\r\n :toggle-shiny-effects\r\n (fn [db _]\r\n   (update db :shiny-effects-enabled not)))\r\n\r\n;; -- Views --\r\n(defn input-field []\r\n  (let [word @(rf/subscribe [:word])]\r\n    [:div.flex.flex-col.items-center.mb-4\r\n     [:label.text-lg.mb-1.text-purple-200 (t :input-label)]\r\n     [:div.flex.w-full.max-w-md.shadow-lg\r\n      [:input.w-full.px-4.py-2.bg-gray-800.border-2.border-purple-700.rounded-l-lg.focus:outline-none.focus:ring-2.focus:ring-indigo-500.text-gray-100.placeholder-gray-500\r\n       {:type \"text\"\r\n        :value word\r\n        :placeholder \"e.g. WIZARD\"\r\n        :on-change #(rf/dispatch [:update-word (-> % .-target .-value)])}]\r\n      [:button.bg-purple-700.text-white.px-5.py-2.rounded-r-lg.hover:bg-purple-600.focus:outline-none.focus:ring-2.focus:ring-purple-500.transition-colors.duration-200.font-medium\r\n       {:on-click #(rf/dispatch [:check-symmetry])}\r\n       (t :analyze-button)]]]))\r\n\r\n(defn check-word []\r\n  (let [word @(rf/subscribe [:word])\r\n        cleaned-word (util/clean word)\r\n        axis-id (when (seq cleaned-word) (sym/axis-id-for-word cleaned-word))\r\n        rotation-axis-id (when (seq cleaned-word) (sym/rotation-symmetry-axis-id-for-word cleaned-word))\r\n        has-mirror-symmetry (and (seq cleaned-word) (sym/symmetric-word? cleaned-word))\r\n        has-rotation-symmetry (and (seq cleaned-word)\r\n                                  (not has-mirror-symmetry)\r\n                                  (sym/rotation-symmetric-word? cleaned-word))]\r\n    [:div.mt-4.text-center\r\n     (if (empty? cleaned-word)\r\n       [:p.text-gray-400 (str (t :input-label) \" \" (t :for) \" \" (t :symmetry-axis))]\r\n       (cond\r\n         has-mirror-symmetry\r\n         [:p.text-green-400 \r\n          (str \"\\\"\" cleaned-word \"\\\" \" (t :with) \" \" (t :mirror-symmetry) \" \" (t :around-axis) \" \" \r\n               (when axis-id (sym/id->axis-name axis-id)))]\r\n         \r\n         has-rotation-symmetry\r\n         [:p.text-green-400 \r\n          (str \"\\\"\" cleaned-word \"\\\" \" (t :with) \" \" (t :rotation-symmetry) \" \" (t :around-axis) \" \" \r\n               (when rotation-axis-id (sym/id->axis-name rotation-axis-id)))]\r\n         \r\n         :else\r\n         [:p.text-red-400 \r\n          (str \"\\\"\" cleaned-word \"\\\" \" (t :no-symmetry))]))]))\r\n\r\n(defn symmetry-display []\r\n  (let [results @(rf/subscribe [:symmetry-results])\r\n        word @(rf/subscribe [:word])\r\n        cleaned-word (util/clean word)\r\n        word-axis-id (when (not-empty cleaned-word) (sym/axis-id-for-word cleaned-word))\r\n        rotation-axis-id (when (not-empty cleaned-word) (sym/rotation-symmetry-axis-id-for-word cleaned-word))\r\n        has-mirror-symmetry (and (some? word-axis-id) (sym/symmetric-word? cleaned-word))\r\n        has-rotation-symmetry (and (not has-mirror-symmetry)\r\n                                 (seq cleaned-word)\r\n                                 (sym/rotation-symmetric-word? cleaned-word))]\r\n    [:div\r\n     (when (and results (seq results))\r\n       [:div.mt-4.w-full.flex.flex-col.items-center\r\n        [:h2.text-xl.mb-3.text-center.text-purple-300.font-semibold (t :symmetry-results)]\r\n        [check-word]\r\n        [:div.flex.flex-wrap.justify-center.gap-6.w-full.mt-4\r\n         ;; Show a single visualization with correct symmetry information\r\n         [:div.bg-gray-800.p-4.rounded-lg.shadow-lg.flex.flex-col.items-center.w-80.border.border-indigo-700.transform.transition-all.duration-300.hover:scale-105\r\n          {:class (when (and (not has-mirror-symmetry) (not has-rotation-symmetry)) \"no-symmetry-container\")}\r\n          [:h3.text-lg.mb-2.text-center.text-indigo-300.font-medium \r\n           (cond\r\n             has-mirror-symmetry (t :mirror-symmetry)\r\n             has-rotation-symmetry (t :rotation-symmetry)\r\n             :else (t :no-symmetry))]\r\n          [:div.alphabet-circle.flex.items-center.justify-center.bg-gray-900.rounded-full.p-1\r\n           [grid/symmetry-view word\r\n            (cond \r\n              has-mirror-symmetry word-axis-id\r\n              has-rotation-symmetry rotation-axis-id\r\n              :else nil)\r\n            (or has-mirror-symmetry has-rotation-symmetry)]]]]])]))\r\n\r\n(defn explanation []\r\n  [:div.bg-gray-800.p-4.rounded-lg.shadow-lg.mb-4.border.border-purple-700.text-gray-200\r\n   [:h2.text-xl.mb-2.text-purple-300.font-semibold (t :explanation-title)]\r\n   [:p.mb-2.text-sm (t :explanation-text)]\r\n   \r\n   [:p.mb-2.text-sm (t :explanation-types)]\r\n   [:p.mb-2.text-sm (t :explanation-mirror)]\r\n   [:p.mb-2.text-sm (t :explanation-rotation)]\r\n   \r\n   [:div.flex.flex-col.md:flex-row.gap-4.text-sm\r\n    [:div.flex-1\r\n     [:p.mb-1 [:span.text-indigo-300.font-medium (t :mirror-symmetry)] \" \" (t :examples) \":\"]\r\n     [:p \r\n      [:span.text-indigo-300.font-medium.cursor-pointer.hover:text-indigo-200.transition-colors.underline\r\n       {:on-click #(rf/dispatch [:update-word \"WIZARD\"])} \"WIZARD\"] \", \"\r\n      [:span.text-indigo-300.font-medium.cursor-pointer.hover:text-indigo-200.transition-colors.underline\r\n       {:on-click #(rf/dispatch [:update-word \"JAGUAR\"])} \"JAGUAR\"] \", \"\r\n      [:span.text-indigo-300.font-medium.cursor-pointer.hover:text-indigo-200.transition-colors.underline\r\n       {:on-click #(rf/dispatch [:update-word \"METAPH\"])} \"METAPH\"] \", \"\r\n      [:span.text-indigo-300.font-medium.cursor-pointer.hover:text-indigo-200.transition-colors.underline\r\n       {:on-click #(rf/dispatch [:update-word \"UNSEWING\"])} \"UNSEWING\"] \", \"\r\n      [:span.text-indigo-300.font-medium.cursor-pointer.hover:text-indigo-200.transition-colors.underline\r\n       {:on-click #(rf/dispatch [:update-word \"VOTING\"])} \"VOTING\"] \", \"\r\n      [:span.text-indigo-300.font-medium.cursor-pointer.hover:text-indigo-200.transition-colors.underline\r\n       {:on-click #(rf/dispatch [:update-word \"BATHMATS\"])} \"BATHMATS\"] \", \"\r\n      [:span.text-indigo-300.font-medium.cursor-pointer.hover:text-indigo-200.transition-colors.underline\r\n       {:on-click #(rf/dispatch [:update-word \"TICKET\"])} \"TICKET\"] \", \"\r\n      [:span.text-indigo-300.font-medium.cursor-pointer.hover:text-indigo-200.transition-colors.underline\r\n       {:on-click #(rf/dispatch [:update-word \"NETFUL\"])} \"NETFUL\"] \", \"\r\n      [:span.text-indigo-300.font-medium.cursor-pointer.hover:text-indigo-200.transition-colors.underline\r\n       {:on-click #(rf/dispatch [:update-word \"FLUENT\"])} \"FLUENT\"] \", \"\r\n      [:span.text-indigo-300.font-medium.cursor-pointer.hover:text-indigo-200.transition-colors.underline\r\n       {:on-click #(rf/dispatch [:update-word \"CROTCHET\"])} \"CROTCHET\"]]]\r\n    \r\n    [:div.flex-1\r\n     [:p.mb-1 [:span.text-indigo-300.font-medium (t :rotation-symmetry)] \" \" (t :examples) \":\"]\r\n     [:p\r\n      [:span.text-indigo-300.font-medium.cursor-pointer.hover:text-indigo-200.transition-colors.underline\r\n       {:on-click #(rf/dispatch [:update-word \"HYRULE\"])} \"HYRULE\"] \", \"\r\n      [:span.text-indigo-300.font-medium.cursor-pointer.hover:text-indigo-200.transition-colors.underline\r\n       {:on-click #(rf/dispatch [:update-word \"NEAR\"])} \"NEAR\"] \", \"\r\n      [:span.text-indigo-300.font-medium.cursor-pointer.hover:text-indigo-200.transition-colors.underline\r\n       {:on-click #(rf/dispatch [:update-word \"NEARLY\"])} \"NEARLY\"] \", \"\r\n      [:span.text-indigo-300.font-medium.cursor-pointer.hover:text-indigo-200.transition-colors.underline\r\n       {:on-click #(rf/dispatch [:update-word \"REFERS\"])} \"REFERS\"]]]]])\r\n\r\n(defn toggle-switch []\r\n  (let [enabled? @(rf/subscribe [:shiny-effects-enabled])]\r\n    [:div.relative.inline-block\r\n     [:button.shiny-toggle-button.flex.items-center.text-sm.bg-indigo-900.hover:bg-indigo-800.transition-colors.px-3.py-2.rounded-md.text-purple-200\r\n      {:on-click #(do \r\n                   (rf/dispatch [:toggle-shiny-effects])\r\n                   ;; Force re-render to make sure CSS changes are applied\r\n                   (js/setTimeout \r\n                    (fn [] \r\n                      (let [body (.-body js/document)\r\n                            currently-enabled? (not enabled?)] ;; Toggle happens after click\r\n                        (when body\r\n                          ;; First remove existing class to ensure clean state\r\n                          (.remove (.-classList body) \"shiny-enabled\")\r\n                          ;; Then add if it should be enabled\r\n                          (when currently-enabled?\r\n                            (.add (.-classList body) \"shiny-enabled\"))))) \r\n                    10))}\r\n      [:span.mr-2 (t (if enabled? :effects-on :effects-off))]\r\n      [:div.relative.inline-flex.items-center.h-5.w-9.rounded-full.transition-colors.duration-200.ease-in-out\r\n       {:class (if enabled? \"bg-purple-600\" \"bg-gray-600\")}\r\n       [:span.absolute.inline-block.h-3.w-3.rounded-full.bg-white.transform.transition-transform.duration-300.shadow-md\r\n        {:class (if enabled? \"translate-x-5\" \"translate-x-1\")}]]]]))\r\n\r\n;; -- File analysis component --\r\n(defn text-analysis []\r\n  (let [processing-state @(rf/subscribe [:processing-state])\r\n        stats @(rf/subscribe [:wordlist-stats])]\r\n    [:div.bg-gray-800.p-4.rounded-lg.shadow-lg.border.border-purple-700.text-gray-200.mt-8\r\n     [:div.flex.justify-between.items-center\r\n      [:h3.text-xl.text-purple-300.font-semibold (t :text-analysis-title)]\r\n      [:div.flex.items-center\r\n       (when-not (or (nil? processing-state) (= (:status processing-state) :complete))\r\n         [:div.flex.items-center.mr-3\r\n          [:svg.animate-spin.-ml-1.mr-2.h-4.w-4.text-purple-500 \r\n           {:xmlns \"http://www.w3.org/2000/svg\" :fill \"none\" :viewBox \"0 0 24 24\"}\r\n           [:circle.opacity-25 {:cx \"12\" :cy \"12\" :r \"10\" :stroke \"currentColor\" :stroke-width \"4\"}]\r\n           [:path.opacity-75 {:fill \"currentColor\" \r\n                              :d \"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"}]]])\r\n       [:label.bg-purple-700.text-white.px-4.py-2.rounded-lg.hover:bg-purple-600.focus:outline-none.focus:ring-2.focus:ring-purple-500.transition-colors.duration-200.font-medium.cursor-pointer.text-sm\r\n        [:input.hidden\r\n         {:type \"file\"\r\n          :accept \".txt\"\r\n          :on-change (fn [e]\r\n                      (when-let [file (-> e .-target .-files (aget 0))]\r\n                        (rf/dispatch [:process-file file])))}]\r\n        (t :upload-button)]]]\r\n     \r\n     [:p.text-sm.text-gray-300.mt-2.mb-4 (t :text-analysis-description)]\r\n     \r\n     ;; Progress indicator\r\n     (when processing-state\r\n       [:div.mt-3\r\n        (case (:status processing-state)\r\n          :reading\r\n          [:div\r\n           [:div.text-sm.text-gray-400.mb-1 \r\n            (str (t :reading-status) (when-let [name (:file-name processing-state)] (str \": \" name)))]\r\n           [:div.w-full.bg-gray-700.rounded-full.h-2.overflow-hidden\r\n            [:div.bg-indigo-500.h-2.transition-all.duration-500.ease-out\r\n             {:style {:width (str (:progress processing-state) \"%\")}}]]]\r\n          \r\n          :processing\r\n          [:div\r\n           [:div.text-sm.text-gray-400.mb-1 \r\n            (str (t :processing-text-status) \": \" \r\n                 (:processed-chunks processing-state) \r\n                 \"/\" \r\n                 (:total-chunks processing-state) \r\n                 \" chunks\")]\r\n           [:div.w-full.bg-gray-700.rounded-full.h-2.overflow-hidden\r\n            [:div.bg-indigo-500.h-2.transition-all.duration-500.ease-out\r\n             {:style {:width (str (:progress processing-state) \"%\")}}]]]\r\n          \r\n          :finding-symmetry\r\n          [:div\r\n           [:div.text-sm.text-gray-400.mb-1 \r\n            (str (t :finding-symmetry) \" \" (:word-count processing-state) \" words\")]\r\n           [:div.w-full.bg-gray-700.rounded-full.h-2.overflow-hidden\r\n            [:div.bg-indigo-500.h-2.transition-all.duration-500.ease-out\r\n             {:style {:width (str (:progress processing-state) \"%\")}}]]]\r\n          \r\n          :mirror-symmetry\r\n          [:div\r\n           [:div.text-sm.text-gray-400.mb-1 (str (t :finding-symmetry) \" \" (t :mirror-symmetry))]\r\n           [:div.w-full.bg-gray-700.rounded-full.h-2.overflow-hidden\r\n            [:div.bg-indigo-500.h-2.transition-all.duration-500.ease-out\r\n             {:style {:width (str (:progress processing-state) \"%\")}}]]]\r\n          \r\n          :rotational-symmetry\r\n          [:div\r\n           [:div.text-sm.text-gray-400.mb-1 (str (t :finding-symmetry) \" \" (t :rotation-symmetry))]\r\n           [:div.w-full.bg-gray-700.rounded-full.h-2.overflow-hidden\r\n            [:div.bg-indigo-500.h-2.transition-all.duration-500.ease-out\r\n             {:style {:width (str (:progress processing-state) \"%\")}}]]]\r\n          \r\n          :done\r\n          [:div.text-sm.text-gray-400.mb-1 (str (t :processing-status) \"...\")]\r\n          \r\n          :complete\r\n          (when stats\r\n            [:div.text-sm.text-green-400.mb-1 \r\n             (str (t :completed-status) \": \" \r\n                  (+ (get-in stats [:mirror :count]) \r\n                     (get-in stats [:rotation :count])) \r\n                  \" \" (t :stats-symmetric-words))])\r\n          \r\n          nil)])]))\r\n\r\n;; -- Wordlist stats component --\r\n(defn wordlist-stats []\r\n  (let [stats @(rf/subscribe [:wordlist-stats])]\r\n    (when stats\r\n      [:div.bg-gray-800.p-4.rounded-lg.shadow-lg.mb-4.border.border-purple-700.text-gray-200\r\n       [:h2.text-xl.mb-3.text-purple-300.font-semibold (t :stats-title)]\r\n       \r\n       [:div.grid.grid-cols-1.md:grid-cols-3.gap-3.mb-4\r\n        [:div.bg-gray-700.rounded-lg.p-3.flex.flex-col.items-center.justify-center\r\n         [:span.text-2xl.font-bold.text-indigo-300 (:total-words stats)]\r\n         [:span.text-xs.text-gray-300 (t :stats-unique-words)]]\r\n        \r\n        [:div.bg-gray-700.rounded-lg.p-3.flex.flex-col.items-center.justify-center\r\n         [:span.text-2xl.font-bold.text-indigo-300 (get-in stats [:mirror :count])]\r\n         [:span.text-xs.text-gray-300 (t :stats-mirror-words)]]\r\n        \r\n        [:div.bg-gray-700.rounded-lg.p-3.flex.flex-col.items-center.justify-center\r\n         [:span.text-2xl.font-bold.text-indigo-300 (get-in stats [:rotation :count])]\r\n         [:span.text-xs.text-gray-300 (t :stats-rotation-words)]]]\r\n       \r\n       ;; Top 10 longest mirror symmetry words\r\n       [:div.mb-4\r\n        [:h3.text-lg.mb-2.text-indigo-300.font-medium (str \"Top 10 \" (t :mirror-symmetry) \" \" (t :for))]\r\n        [:div.flex.flex-wrap.gap-2\r\n         (for [word (get-in stats [:mirror :top-10])]\r\n           ^{:key word}\r\n           [:span.bg-gray-700.px-3.py-1.rounded-md.cursor-pointer.hover:bg-gray-600.transition-colors.text-indigo-200.text-sm\r\n            {:on-click #(rf/dispatch [:update-word word])}\r\n            word])]]\r\n       \r\n       ;; Top 10 longest rotational symmetry words\r\n       [:div.mb-4\r\n        [:h3.text-lg.mb-2.text-indigo-300.font-medium (str \"Top 10 \" (t :rotation-symmetry) \" \" (t :for))]\r\n        [:div.flex.flex-wrap.gap-2\r\n         (for [word (get-in stats [:rotation :top-10])]\r\n           ^{:key word}\r\n           [:span.bg-gray-700.px-3.py-1.rounded-md.cursor-pointer.hover:bg-gray-600.transition-colors.text-indigo-200.text-sm\r\n            {:on-click #(rf/dispatch [:update-word word])}\r\n            word])]]\r\n       \r\n       ;; Mirror symmetry by axis\r\n       [:div\r\n        [:h3.text-lg.mb-2.text-indigo-300.font-medium (str (t :for) \" \" (t :by) \" \" (t :symmetry-axis))]\r\n        [:div.grid.grid-cols-1.md:grid-cols-2.gap-3\r\n         (for [[axis-id words] (get-in stats [:mirror :by-axis])\r\n               :when (seq words)\r\n               :let [axis-name (sym/id->axis-name axis-id)\r\n                     top-words (take 5 words)]]\r\n           ^{:key axis-id}\r\n           [:div.bg-gray-700.rounded-lg.p-3\r\n            [:h4.text-indigo-200.font-medium.mb-1.text-sm\r\n             (str axis-name \" \" (t :axis) \" (\" (count words) \" \" (t :for) \")\")]\r\n            [:div.flex.flex-wrap.gap-1\r\n             (for [word top-words]\r\n               ^{:key word}\r\n               [:span.bg-gray-600.px-2.py-0.5.rounded-md.text-xs.cursor-pointer.hover:bg-gray-500.transition-colors.text-indigo-100\r\n                {:on-click #(rf/dispatch [:update-word word])}\r\n                word])]])]]])))\r\n\r\n;; -- Footer component --\r\n(defn footer []\r\n  [:div.w-full.text-center.py-4.text-gray-400.text-xs.border-t.border-gray-800\r\n   [:div.flex.flex-col.items-center.justify-center\r\n    [:p.mb-2 (t :footer-text)]\r\n    [:a.github-link.text-indigo-400.hover:text-indigo-300.transition-colors.flex.items-center\r\n     {:href \"https://github.com/Tok/wizmetria-web\"\r\n      :target \"_blank\"\r\n      :rel \"noopener noreferrer\"}\r\n     [:span.mr-1 (t :github-link)]\r\n     ;; GitHub SVG icon\r\n     [:svg.w-4.h-4 \r\n      {:xmlns \"http://www.w3.org/2000/svg\" \r\n       :viewBox \"0 0 24 24\" \r\n       :fill \"currentColor\"}\r\n      [:path \r\n       {:d \"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z\"}]]]]])\r\n\r\n(defn main-panel []\r\n  (let [text-direction @(rf/subscribe [:text-direction])\r\n        shiny-enabled? @(rf/subscribe [:shiny-effects-enabled])\r\n        rtl? (= text-direction \"rtl\")]\r\n    [:div.min-h-screen.bg-gray-900.text-purple-100.flex.flex-col\r\n     {:dir text-direction\r\n      :class (when shiny-enabled? \"shiny-enabled\")}\r\n     [:div.flex-grow.px-4.py-6.flex.flex-col.items-center\r\n      [:div.flex.items-center.justify-between.w-full.max-w-5xl.px-2.py-2\r\n       [:div.flex.items-center\r\n        [:h1.text-5xl.text-purple-300.font-bold.tracking-wider.mr-4.app-title\r\n         {:style (merge\r\n                  {:font-family \"'Courier New', monospace\"}\r\n                  (when shiny-enabled? \r\n                    {:text-shadow \"0 0 12px rgba(139, 92, 246, 0.5), 0 0 24px rgba(139, 92, 246, 0.3)\"}))} \r\n         (t :app-title)]\r\n        [:h2.text-xl.text-indigo-300.font-light.hidden.sm:block\r\n         {:style (merge\r\n                  {:font-family \"'Courier New', monospace\"}\r\n                  (when shiny-enabled? \r\n                    {:text-shadow \"0 0 5px rgba(99, 102, 241, 0.3)\"}))}\r\n         (t :app-subtitle)]]\r\n       [:div.controls-container.flex.items-center.space-x-2\r\n        {:class (when rtl? \"rtl space-x-reverse\")}\r\n        (if rtl?\r\n          [i18n/language-selector]\r\n          [toggle-switch])\r\n        (if rtl?\r\n          [toggle-switch]\r\n          [i18n/language-selector])]]\r\n      [:div.w-full.max-w-5xl\r\n       [explanation]\r\n       [input-field]\r\n       [symmetry-display]\r\n       [text-analysis]\r\n       [wordlist-stats]]]\r\n     [footer]]))\r\n\r\n(defn mount-root []\r\n  (rf/dispatch-sync [:initialize])\r\n  \r\n  ;; Apply initial shiny effects to body ONLY if enabled in app state\r\n  (let [shiny-enabled? @(rf/subscribe [:shiny-effects-enabled])\r\n        body (.-body js/document)]\r\n    (when (and body shiny-enabled?)\r\n      (.add (.-classList body) \"shiny-enabled\")))\r\n  \r\n  (let [root (rdomc/create-root (.getElementById js/document \"app\"))]\r\n    (rdomc/render root [main-panel])))\r\n\r\n(defn init []\r\n  (mount-root)) "]}