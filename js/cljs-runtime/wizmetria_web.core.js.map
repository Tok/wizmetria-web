{"version":3,"sources":["wizmetria_web/core.cljs"],"mappings":";AAeA,2DAAA,3DAACA,kKAEA,WAAKC;AAAL,AACE,OAAA,mFAAOA;;AAEV,2DAAA,3DAACD,0LAEA,WAAKC;AAAL,AACE,OAAA,2GAAmBA;;AAEtB,2DAAA,3DAACD,uLAEA,WAAKC;AAAL,AACE,OAAA,wGAAiBA;;AAEpB,2DAAA,3DAACD,0LAEA,WAAKC;AAAL,AACE,OAAA,2GAAmBA;;AAEtB,2DAAA,3DAACD,oMAEA,WAAKC;AAAL,AACE,sDAAA,uFAAA,tIAACC,4CAAID;;AAGR,yDAAA,zDAACE,yHAEA,WAAKC,EAAEA;AAAP,AAEE,IAAMC,eAAa,sFAAA,mFAAA,zKAACC,+CAAOC;iBAA3B,2CAAA,kEAAA,6EAAA,mCAAA,0EAAA,KAAA,6EAAA,KAAA,uFAAA,leACMC,6GAAkBH;AADxB,AAQE,WAAA,XAACI;AAAD,AACE,AACE,uBAAA,mFAAA,1GAACC;;AACD,uBAAA,mFAAA,1GAACA,4KAA0BL;;AAC3B,8BAAA,mFAAA,1GAACK;GAJL;;AAOAF;;AAGL,gCAAA,hCAAMG;AAAN,AACE,qBAAA,AAAAC,jBAAMC,iCAAgB,sDAAA,mFAAA,zIAACC;2BAAvB,AAAAF,vBACMG,uCAAgB,sDAAA,mFAAA,zIAACD;AADvB,AAAA,0FAAA,kKAAA,2CAAA,kEAAA,8HAAA,mFAAA,gJAAA,6HAAA,mFAAA,qFAAA,uIAAA,oIAAA,yIAAA,sIAAA,oJAAA,n0CAGSD,uEACE,wCAAA,AAAA,gBAAA,tCAAME,0WAEZC,qSAECC,uIACAC,oIACAC,yIACAC,sIACAC,oJACFC;;AAEN,gCAAA,hCAAMC;AAAN,AACE,4BAAA,mFAAA,/GAACC;;AAGD,IAAMC,aAAK,AAAQC;mBAAnB,AAAAd,fACMe,+BAAQC;IACRb,6BAAe,yDAAA,uFAAA,hJAACb,4CAAIyB;AAF1B,AAGE,oBAAM,iBAAAE,oBAAKJ;AAAL,AAAA,oBAAAI;AAAUd;;AAAVc;;;AAAN,AACE,yBAAA,zBAAM,AAAaJ;;AADrB;;AAGF,IAAMK,OAAK,AAACC,+BAAkB,wBAAA,xBAAiBL;AAA/C,AACE,oEAAA,7DAACM,wDAAaF,wFAAMnB;;AAExB,0BAAA,1BAAMsB;AAAN,AACE,AAACV;;AAED,+BAAA,xBAAmBW,uCACD,WAAK9B;AAAL,AACE,mCAAA,mFAAA,/GAACoB","names":["re_frame.core.reg_sub","db","cljs.core.get","re_frame.core.reg_event_db","_","default-word","cljs.core.get_in","wizmetria-web.config/processing-config","initial-db","js/setTimeout","re-frame.core/dispatch","wizmetria-web.core/main-panel","cljs.core/deref","text-direction","re_frame.core.subscribe","shiny-enabled?","wizmetria-web.views.layout/header","wizmetria-web.views.explanation/explanation","wizmetria-web.views.symmetry/input-field","wizmetria-web.views.symmetry/symmetry-display","wizmetria-web.views.analysis/text-analysis","wizmetria-web.views.stats/wordlist-stats","wizmetria-web.views.layout/footer","wizmetria-web.core/mount-root","re-frame.core/dispatch-sync","body","js/document","app-db","re-frame.db/app-db","and__5000__auto__","root","reagent.dom.client/create-root","reagent.dom.client.render","wizmetria-web.core/init","js/window"],"sourcesContent":["(ns wizmetria-web.core\r\n  (:require [reagent.dom.client :as rdomc]\r\n            [re-frame.core :as rf]\r\n            [re-frame.db :as re-frame-db]\r\n            [wizmetria-web.config :as config]\r\n            [wizmetria-web.events]\r\n            [wizmetria-web.processing]\r\n            [wizmetria-web.processing-simple]\r\n            [wizmetria-web.views.layout :as layout]\r\n            [wizmetria-web.views.symmetry :as symmetry]\r\n            [wizmetria-web.views.analysis :as analysis]\r\n            [wizmetria-web.views.stats :as stats]\r\n            [wizmetria-web.views.explanation :as explanation]))\r\n\r\n;; -- Subscriptions --\r\n(rf/reg-sub\r\n :word\r\n (fn [db]\r\n   (:word db)))\r\n\r\n(rf/reg-sub\r\n :symmetry-results\r\n (fn [db]\r\n   (:symmetry-results db)))\r\n\r\n(rf/reg-sub\r\n :wordlist-stats\r\n (fn [db]\r\n   (:wordlist-stats db)))\r\n\r\n(rf/reg-sub\r\n :processing-state\r\n (fn [db]\r\n   (:processing-state db)))\r\n\r\n(rf/reg-sub\r\n :shiny-effects-enabled\r\n (fn [db]\r\n   (get db :shiny-effects-enabled false)))\r\n\r\n;; -- Initialize app --\r\n(rf/reg-event-db\r\n :initialize\r\n (fn [_ _]\r\n   ;; First create a basic app DB\r\n   (let [default-word (get-in config/processing-config [:default-word])\r\n         initial-db {:word default-word\r\n                     :symmetry-results {}\r\n                     :wordlist-stats nil\r\n                     :processing-state nil\r\n                     :shiny-effects-enabled false}]\r\n     \r\n     ;; Initialize language separately\r\n     (js/setTimeout \r\n      #(do\r\n         (rf/dispatch [:init-language])\r\n         (rf/dispatch [:update-word default-word])\r\n         (rf/dispatch [:check-symmetry]))\r\n      10)\r\n     \r\n     initial-db)))\r\n\r\n;; -- Main panel view --\r\n(defn main-panel []\r\n  (let [text-direction @(rf/subscribe [:text-direction])\r\n        shiny-enabled? @(rf/subscribe [:shiny-effects-enabled])]\r\n    [:div.min-h-screen.bg-gray-900.text-purple-100.flex.flex-col\r\n     {:dir text-direction\r\n      :class (when shiny-enabled? \"shiny-enabled\")}\r\n     [:div.flex-grow.px-4.py-6.flex.flex-col.items-center\r\n      [layout/header]\r\n      [:div.w-full.max-w-5xl\r\n       [explanation/explanation]\r\n       [symmetry/input-field]\r\n       [symmetry/symmetry-display]\r\n       [analysis/text-analysis]\r\n       [stats/wordlist-stats]]]\r\n     [layout/footer]]))\r\n\r\n(defn mount-root []\r\n  (rf/dispatch-sync [:initialize])\r\n  \r\n  ;; Get shiny-effects-enabled from app-db directly instead of using subscribe\r\n  (let [body (.-body js/document)\r\n        app-db @re-frame-db/app-db ;; Use the properly required namespace\r\n        shiny-enabled? (get app-db :shiny-effects-enabled false)]\r\n    (when (and body shiny-enabled?)\r\n      (.add (.-classList body) \"shiny-enabled\")))\r\n  \r\n  (let [root (rdomc/create-root (.getElementById js/document \"app\"))]\r\n    (rdomc/render root [main-panel])))\r\n\r\n(defn init []\r\n  (mount-root)\r\n  ;; Add shutdown handler\r\n  (.addEventListener js/window \"beforeunload\" \r\n                    (fn [_] \r\n                      (rf/dispatch-sync [:shutdown])))) "]}