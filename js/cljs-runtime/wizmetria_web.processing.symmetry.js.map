{"version":3,"sources":["wizmetria_web/processing/symmetry.cljs"],"mappings":"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","names":["wizmetria-web.processing.symmetry/find-symmetric-words","words","mirror-sym-words","cljs.core.filter","wizmetria-web.sym/symmetric-word?","mirror-by-axis","cljs.core/group-by","wizmetria-web.sym/axis-id-for-word","mirror-by-axis-sorted","cljs.core.into","cljs.core.map","p__13579","vec__13580","cljs.core.nth","axis","cljs.core.sort_by","cljs.core.comp","cljs.core/-","cljs.core/count","wizmetria-web.processing.symmetry/find-rotation-words","rotation-sym-words","word","wizmetria-web.sym/rotation-symmetric-word?","cljs.core/not","rotation-sorted","wizmetria-web.processing.symmetry/calculate-statistics","unique-words","mirror-results","rotation-results","total-words","mirror-count","rotation-count","top-words-count","cljs.core.get_in","wizmetria-web.config/ui-config","cljs.core.take","wizmetria-web.processing.symmetry/process-symmetry","stats","wizmetria-web.processing.symmetry/worker-enabled?","wizmetria-web.config/processing-config","wizmetria-web.processing.symmetry/process-symmetry-with-worker","on-progress","on-complete","on-error","js/console.log","wizmetria-web.processing.worker/process-words-in-batches","progress-data","cljs.core/clj->js","G__13607","results","_","error","js/console.error","e13608","js/Error","err","G__13609"],"sourcesContent":["(ns wizmetria-web.processing.symmetry\r\n  (:require [wizmetria-web.sym :as sym]\r\n            [wizmetria-web.config :as config]\r\n            [wizmetria-web.processing.worker :as worker]))\r\n\r\n;; -- Pure symmetry processing functions --\r\n\r\n(defn find-symmetric-words\r\n  \"Find words with mirror symmetry and group them by axis\"\r\n  [words]\r\n  (let [mirror-sym-words (filter sym/symmetric-word? words)\r\n        mirror-by-axis (group-by sym/axis-id-for-word mirror-sym-words)\r\n        mirror-by-axis-sorted (into {} \r\n                                (map (fn [[axis words]]\r\n                                       [axis (sort-by (comp - count) words)])\r\n                                     mirror-by-axis))]\r\n    {:words mirror-sym-words\r\n     :by-axis mirror-by-axis-sorted}))\r\n\r\n(defn find-rotation-words\r\n  \"Find words with rotational symmetry (that don't have mirror symmetry)\"\r\n  [words]\r\n  (let [rotation-sym-words (filter (fn [word] \r\n                                     (and (sym/rotation-symmetric-word? word)\r\n                                          (not (sym/symmetric-word? word))))\r\n                                   words)\r\n        rotation-sorted (sort-by (comp - count) rotation-sym-words)]\r\n    {:words rotation-sym-words\r\n     :sorted rotation-sorted}))\r\n\r\n(defn calculate-statistics\r\n  \"Calculate statistics for symmetry analysis results\"\r\n  [unique-words mirror-results rotation-results]\r\n  (let [total-words (count unique-words)\r\n        mirror-count (count (:words mirror-results))\r\n        rotation-count (count (:words rotation-results))\r\n        top-words-count (get-in config/ui-config [:top-words-to-show])]\r\n    {:total-words total-words\r\n     :mirror {:count mirror-count\r\n              :by-axis (:by-axis mirror-results)\r\n              :top-n (take top-words-count (sort-by (comp - count) (:words mirror-results)))}\r\n     :rotation {:count rotation-count\r\n                :words (:sorted rotation-results)\r\n                :top-n (take top-words-count (:sorted rotation-results))}}))\r\n\r\n(defn process-symmetry\r\n  \"Complete symmetry processing pipeline\"\r\n  [unique-words]\r\n  (let [mirror-results (find-symmetric-words unique-words)\r\n        rotation-results (find-rotation-words unique-words)\r\n        stats (calculate-statistics unique-words \r\n                                  mirror-results \r\n                                  rotation-results)]\r\n    stats))\r\n\r\n;; -- Enhanced worker-based processing --\r\n\r\n(defn worker-enabled?\r\n  \"Check if worker-based processing is enabled\"\r\n  []\r\n  (get-in config/processing-config [:worker-enabled] false))\r\n\r\n(defn process-symmetry-with-worker\r\n  \"Process symmetry using web workers for better performance\"\r\n  [unique-words on-progress on-complete on-error]\r\n  (js/console.log \"Starting symmetry processing with\" (count unique-words) \"unique words\")\r\n  (js/console.log \"Worker enabled:\" (worker-enabled?))\r\n  \r\n  (if (worker-enabled?)\r\n    ;; Use worker-based processing\r\n    (do\r\n      (js/console.log \"Using worker-based processing\")\r\n      (worker/process-words-in-batches \r\n       unique-words\r\n       (fn [progress-data]\r\n         (js/console.log \"Worker progress:\" (clj->js progress-data))\r\n         (on-progress {:state :processing-symmetry\r\n                       :progress (+ 80 (* 0.15 (:progress progress-data)))\r\n                       :batch-progress progress-data}))\r\n       (fn [results]\r\n         ;; Create full statistics\r\n         (js/console.log \"Worker processing complete, results:\" (clj->js results))\r\n         (let [mirror-results (:mirror results)\r\n               rotation-results (:rotation results)\r\n               _ (js/console.log \"Mirror results:\" (clj->js mirror-results))\r\n               _ (js/console.log \"Rotation results:\" (clj->js rotation-results))\r\n               stats (calculate-statistics unique-words \r\n                                          mirror-results \r\n                                          rotation-results)]\r\n           (js/console.log \"Calculated stats:\" (clj->js stats))\r\n           (on-complete stats)))\r\n       (fn [error]\r\n         (js/console.error \"Worker processing error:\" (clj->js error))\r\n         (on-error error))))\r\n    \r\n    ;; Use traditional single-threaded processing\r\n    (try\r\n      (js/console.log \"Using single-threaded processing\")\r\n      (let [stats (process-symmetry unique-words)]\r\n        (js/console.log \"Single-threaded processing complete, stats:\" (clj->js stats))\r\n        (on-complete stats))\r\n      (catch js/Error err\r\n        (js/console.error \"Error in single-threaded processing:\" err)\r\n        (when on-error\r\n          (on-error {:error-message \"Error processing symmetry\"\r\n                     :details (.-message err)})))))) "]}