{"version":3,"sources":["wizmetria_web/sym.cljs"],"mappings":"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","names":["wizmetria-web.sym/ordinal","c","wizmetria-web.sym/sum->id","ordinal-sum","cljs.core/mod","wizmetria-web.sym/ord->id","ordinal","wizmetria-web.sym/id->axis-name","id","v","c0","cljs.core/char","c1","c13","c14","cljs.core/even?","cljs.core.replace","cljs.core.apply","cljs.core/str","wizmetria-web.sym/on-axis?","total","cljs.core._EQ_","wizmetria-web.sym/axis-ordinal","wizmetria-web.sym/sym?","word","w","wizmetria-web.util/clean","cljs.core/first","a","b","on?","G__11981","cljs.core/last","next","cljs.core.subs","cljs.core.drop_last","and__5000__auto__","accept?","wizmetria-web.sym/rotation-sym?","chars","cljs.core/vec","cljs.core/seq","offsets","p1__12049#","cljs.core.map","G__12067","cljs.core.range","cljs.core/count","p1__12059#","cljs.core/every?","wizmetria-web.sym/symmetric?","sum","p1__12084#","cljs.core.filter","wizmetria-web.sym/not-symmetric?","cljs.core/not","wizmetria-web.sym/az-symmetric?","s","wizmetria-web.sym/symmetric-word?","cleaned","mirror-sym","cljs.core/some","or__5002__auto__","wizmetria-web.sym/rotation-symmetric-word?","char-freqs","cljs.core/frequencies","p__12112","vec__12114","cljs.core.nth","freq","ord","pair-ord","pair-char","cljs.core.get","wizmetria-web.sym/clean","wizmetria-web.sym/axis-id-for-word","iter__5480__auto__","s__12141","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","b__12145","cljs.core/chunk-buffer","i__12144","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__12140","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","wizmetria-web.sym/rotation-symmetry-axis-id-for-word","first-char","first-ord","axis-id","wizmetria-web.sym/filter-sym","coll","p1__12176#","wizmetria-web.sym/find-sym","cljs.core.sort_by","wizmetria-web.sym/filter-results","results","cljs.core.comp","cljs.core/not-empty","cljs.core/second","wizmetria-web.sym/evaluate","words","p1__12185#","cljs.core/chunk-first"],"sourcesContent":["(ns wizmetria-web.sym\r\n  (:require [wizmetria-web.util :as util]))\r\n\r\n(defn- ordinal \r\n  \"A=1, B=2, C=3 .. Z=26\" \r\n  [c] \r\n  (- (.charCodeAt c 0) (.charCodeAt \"@\" 0)))\r\n\r\n(defn sum->id [ordinal-sum] \r\n  (-> ordinal-sum (- 2) (mod 26)))\r\n\r\n(defn ord->id [ordinal] \r\n  (-> ordinal (- 1) (* 2) (mod 26)))\r\n\r\n(defn id->axis-name [id]\r\n  (let [v (-> id (mod 26) (/ 2) (+ (.charCodeAt \"A\" 0)))\r\n        c0 (char v) \r\n        c1 (char (+ v 1))\r\n        c13 (char (+ v 13)) \r\n        c14 (char (+ v 14))]\r\n    (->> (if (even? id) (str c0 \\- c13) (str c0 c1 \\- c13 c14))\r\n         (replace {\\[ \\A \\@ \\Z}) (apply str))))\r\n\r\n(defn on-axis? [c total] \r\n  (= (sum->id total) (-> c ordinal ord->id)))\r\n\r\n(defn axis-ordinal [c total] \r\n  (= (sum->id total) (-> c ordinal)))\r\n\r\n(defn- sym? [word total]\r\n  (let [w (util/clean word)]\r\n    (letfn [(on? [] (-> w first (on-axis? total)))\r\n            (accept? [a b] (if (= a b) (on?) (= (+ a b) total)))]\r\n      (case (count w)\r\n        0 true \r\n        1 (on-axis? (first w) total)\r\n        (let [a (-> w first ordinal) \r\n              b (-> w last ordinal)\r\n              next (apply str (-> w (subs 1) drop-last))]\r\n          (and (accept? a b) (recur next total)))))))\r\n\r\n(defn- rotation-sym? \r\n  \"Check if word has rotation symmetry (characters like HYRULE with consecutive letter pairs)\"\r\n  [word]\r\n  (let [w (util/clean word)\r\n        chars (vec (seq w))\r\n        offsets (map #(- (ordinal (chars (inc %))) \r\n                         (ordinal (chars %)))\r\n                    (range 0 (dec (count chars))))]\r\n    (and (> (count chars) 2)\r\n         (every? #(and (> % 0) (<= % 2)) offsets))))\r\n\r\n(defn symmetric? [word sum]\r\n  (->> [sum (+ sum 26) (+ sum 52)]\r\n       (filter #(sym? word %))\r\n       seq))\r\n\r\n(defn not-symmetric? [word sum] \r\n  (not (symmetric? word sum)))\r\n\r\n(defn az-symmetric? [s] \r\n  (sym? s 27))\r\n\r\n(defn symmetric-word? [word] ;mirror-symmetry\r\n  (let [cleaned (util/clean word)\r\n        mirror-sym (some (fn [sum] (sym? cleaned sum)) (range 1 53))]\r\n    (or mirror-sym (rotation-sym? cleaned))))\r\n\r\n;(defn rotation-symmetric-word? [word] (symmetric? word (reduce + (map ordinal word))))\r\n\r\n(defn rotation-symmetric-word? [word]\r\n  (let [cleaned (util/clean word)\r\n        chars (vec (seq cleaned))\r\n        char-freqs (frequencies chars)]\r\n    (and (> (count chars) 2)\r\n         (every? (fn [[c freq]]\r\n                   (let [ord (ordinal c)\r\n                         pair-ord (mod (+ ord 13) 26)\r\n                         pair-char (char (+ pair-ord (.charCodeAt \"@\" 0)))]\r\n                     (= freq (get char-freqs pair-char 0))))\r\n                 char-freqs))))\r\n\r\n(defn clean [s]\r\n  (util/clean s))\r\n\r\n(defn axis-id-for-word [word]\r\n  (let [w (util/clean word)]\r\n    (cond\r\n      ;; Single letter case - return the letter's ordinal-to-axis mapping\r\n      (= (count w) 1)\r\n      (ord->id (ordinal (first w)))\r\n      \r\n      ;; A-Z symmetry case (like WIZARD)\r\n      (az-symmetric? w)\r\n      25 ;; MN-ZA axis for A-Z symmetry\r\n      \r\n      ;; General case - try to find a symmetry sum\r\n      :else\r\n      (first\r\n        (for [sum (range 1 53)\r\n              :when (sym? w sum)]\r\n          (sum->id sum))))))\r\n\r\n(defn rotation-symmetry-axis-id-for-word [word]\r\n  ;; For rotation symmetry, letters pair with others 13 positions away\r\n  ;; The axis of symmetry is perpendicular to these pairings\r\n  ;; We can derive it from the first letter's ordinal position\r\n  (let [w (util/clean word)\r\n        first-char (first w)\r\n        first-ord (ordinal first-char)\r\n        ;; For rotation symmetry, the axis is perpendicular to letter pairs\r\n        ;; If a letter pairs with another 13 positions away,\r\n        ;; the perpendicular axis is at +6.5 positions (half of 13)\r\n        ;; Since we need integer IDs, we use a specific offset\r\n        ;; For example, with first letter H (ord 8), we want axis ID 11 (FG-ST)\r\n        ;; So the formula is (ord + 3) % 26\r\n        axis-id (mod (+ first-ord 3) 26)]\r\n    axis-id))\r\n\r\n(defn- filter-sym [id coll] \r\n  (filter #(symmetric? % (+ id 2)) coll))\r\n\r\n(defn- find-sym [id coll] \r\n  [id (->> coll (filter-sym id) (sort-by count) vec)])\r\n\r\n(defn- filter-results [results] \r\n  (filter (comp not-empty second) results))\r\n\r\n(defn evaluate [words] \r\n  (->> 26 range (map #(find-sym % words)) filter-results))"]}